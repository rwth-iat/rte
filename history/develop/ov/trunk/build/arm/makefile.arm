
#   $Id: makefile.arm,v 1.1 2005-08-24 08:53:44 ansgar Exp $
#
#   Copyright (C) 1998-1999
#   Lehrstuhl fuer Prozessleittechnik,
#   RWTH Aachen, D-52056 Aachen, Germany.
#   All rights reserved.
#
#   Author: Dirk Meyer <dirk@plt.rwth-aachen.de>
#
#   This file is part of the ACPLT/OV Package which is licensed as open
#   source under the Artistic License; you can use, redistribute and/or
#   modify it under the terms of that license.
#
#   You should have received a copy of the Artistic License along with
#   this Package; see the file ARTISTIC-LICENSE. If not, write to the
#   Copyright Holder.
#
#   THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
#   WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES
#   OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.

#	History:
#	--------
#	17-Jun-1998 Dirk Meyer <dirk@plt.rwth-aachen.de>: File created.
#	16-Apr-1999 Dirk Meyer <dirk@plt.rwth-aachen.de>: Major revision.
#	09-Jul-2001 Ansgar Münnemann <ansgar@plt.rwth-aachen.de>: ov_builder included.

SYSTEM = LINUX
SYSDIR = linux


#	Filename conventions
#	--------------------

_OBJ = .o
_LIB = .a
_DLL = .so
_EXE =

#	Platform-specific definitions
#	-----------------------------

ACPLTKS_PLATFORM_DEFINES	=
OV_DEBUG					=
ifdef OV_DEBUG
OV_DODEBUG	=	-DOV_DEBUG
else
OV_DODEBUG	=
endif
OV_PLATFORM_DEFINES			= $(OV_DODEBUG)

#	Compiler
#	--------

COMPILER		= GNU

FLEX			= flex
BISON			= bison

CC_386			= gcc
CC_ARM                  = /opt/Embedix/tools/bin/arm-linux-gcc
CC_FLAGS		= -g -Wall -O2 -shared
COMPILE_C_386		= $(CC_386) $(CC_FLAGS) $(DEFINES) $(INCLUDES) -c
COMPILE_C_ARM           = $(CC_ARM) $(CC_FLAGS) $(DEFINES) $(INCLUDES) -c

LINK_386		= $(CC_386)
LINK_ARM                = $(CC_ARM)
C_LIBS			=

LD_ARM			= $(CC_ARM) -shared
LD_LIB			= -ldl

CXX_386			= $(CC_386) -x c++
CXX_ARM                 = $(CC_ARM) -x c++
CXX_FLAGS		= $(CC_FLAGS) -fno-implicit-templates -Wno-deprecated
CXX_COMPILE_386		= $(CXX_386) $(CXX_FLAGS) $(DEFINES) $(INCLUDES) -c
CXX_COMPILE_ARM         = $(CXX_ARM) $(CXX_FLAGS) $(DEFINES) $(INCLUDES) -c


CXX_LINK_386 		= MAKE=$(MAKE) perl ../templ.pl $(CC_386)
CXX_LINK_ARM            = MAKE=$(MAKE) perl ../templ.pl $(CC_ARM)
CXX_LIBS		= $(C_LIBS) -lstdc++

AR_386			= ar
RANLIB_386		= ranlib

AR_ARM                  = /opt/Embedix/tools/bin/arm-linux-ar
RANLIB_ARM              = /opt/Embedix/tools/bin/arm-linux-ranlib

#   Include generic part
#   --------------------

include ../generic.mk

#	all defines and includes together
#	---------------------------------

DEFINES	 = $(LIBRPC_DEFINES) $(ACPLTKS_DEFINES) $(OV_DEFINES)
INCLUDES = $(C_INCLUDES) $(LIBRPC_INCLUDES) $(ACPLTKS_INCLUDES) $(OV_INCLUDES)

#	presupposed libraries
#	---------------------

LIBMPM_LIB			= $(LIBMPM_DIR)libmpm$(_LIB)

ACPLTKS_LIBS			= $(ACPLT_PLT_BUILD_DIR)libplt$(_LIB) $(LIBRPC_LIB)

#	Targets
#	-------

targets: $(OV_CODEGEN_EXE) \
        $(OV_BUILDER_EXE) \
        $(OV_LIBOV_DLL) \
        $(OV_LIBOV_LIB) \
        $(OV_DBUTIL_EXE) \
        $(OV_LIBOVKS_DLL) \
        $(OV_LIBOVKS_LIB) \
        $(KSHISTLIB_DLL) \
        $(KSHISTLIB_LIB) \
        $(DYNOV_DLL) \
        $(DYNOV_LIB) \
        $(TASKLIB_DLL) \
        $(TASKLIB_LIB) \
        $(EXAMPLE_DLL) \
        $(EXAMPLE_LIB) \
        $(OV_SERVER_EXE)

all: targets

#   Implicit Rules
#   --------------

.c$(_OBJ):
	$(COMPILE_C_ARM) $< -o $@

.cpp$(_OBJ):
	$(CXX_COMPILE_ARM) $< -o $@

.lex.c:
	$(FLEX) -o$@ $<

.y.c:
	$(BISON) -t -d -o$@ $<

.ovm.c:
	./$(OV_CODEGEN_EXE) -I $(OV_MODEL_DIR) -f $< -l $(notdir $(basename $<))

.ovm.h:
	./$(OV_CODEGEN_EXE) -I $(OV_MODEL_DIR) -f $< -l $(notdir $(basename $<))

#   Dependencies
#   ------------

.depend:
	touch $@

depend : $(SOURCES)
	$(CXX_COMPILE) -MM $^ > .depend
	perl ../depend_nt.pl .depend > ../nt/depend.nt
	perl ../depend_rm.pl .depend > ../rmos/depend.rm
	perl ../depend_mc.pl .depend > ../mc164/depend.mc
	perl ../depend_vms.pl .depend > ../openvms/depend.vms

#	Libraries
#	---------

#	ACPLT/OV library

$(OV_LIBOV_LIB) : $(OV_LIBOV_OBJ)
	$(AR_ARM) rv $@ $?
	$(RANLIB_ARM) $@

$(OV_LIBOV_DLL) : $(OV_LIBOV_OBJ) $(LIBMPM_LIB)
	$(LD_ARM) -o $@ $^

ov.c ov.h : $(OV_CODEGEN_EXE)

#	ACPLT/OV library for ACPLT/KS integration

$(OV_LIBOVKS_LIB) : $(KS_LIBOVKS_OBJ) $(OV_LIBOVKS_OBJ)
	$(AR_ARM) rv $@ $?
	$(RANLIB_ARM) $@

$(OV_LIBOVKS_DLL) : $(KS_LIBOVKS_OBJ) $(OV_LIBOVKS_OBJ) $(ACPLTKS_LIBS)
	$(LD_ARM) -o $@ $^ $(CXX_LIBS)

ov_ksserver$(_OBJ) : $(OV_SOURCE_LIBOVKS_DIR)ov_ksserver.c
	$(CXX_COMPILE_ARM) -o $@ $<

ov_ksclient$(_OBJ) : $(OV_SOURCE_LIBOVKS_DIR)ov_ksclient.c
	$(CXX_COMPILE_ARM) -o $@ $<

#	Executables
#	-----------

#	ACPLT/OV C code generator

ov_ovmparser.o : ov_ovmparser.c
	$(COMPILE_C_386) $< -o $@

ov_ovmscanner.o : ov_ovmscanner.c
	$(COMPILE_C_386) $< -o $@

ov_codegen.o : ov_codegen.c
	$(COMPILE_C_386) $< -o $@

$(OV_CODEGEN_EXE) : $(OV_CODEGEN_OBJ)
	$(LINK_386) -o $@ $^ $(C_LIBS)

#	ACPLT/OV framework builder

ov_builder.o : ov_builder.c
	$(COMPILE_C_386) $< -o $@

$(OV_BUILDER_EXE) : $(OV_BUILDER_OBJ)
	$(LINK_386) -o $@ $^ $(C_LIBS)

#	ACPLT/OV database utility

$(OV_DBUTIL_EXE) : $(OV_DBUTIL_OBJ) $(OV_LIBOV_DLL)
	$(LINK_ARM) -rdynamic -o $@ $^ $(C_LIBS) $(LD_LIB)

#	ACPLT/KS-Server for ACPLT/OV

$(OV_SERVER_EXE) : $(OV_SERVER_OBJ) $(OV_LIBOVKS_DLL) $(OV_LIBOV_DLL)
	$(CXX_LINK_ARM) -rdynamic -o $@ $^ $(CXX_LIBS) $(LD_LIB)


#	ACPLT/OV KsHistory library
#	--------------------------

$(KSHISTLIB_LIB) : $(KSHISTLIB_OBJ)
	$(AR_ARM) rv $@ $?
	$(RANLIB_ARM) $@

$(KSHISTLIB_DLL) : $(KSHISTLIB_OBJ)
	$(LD_ARM) -o $@ $^

kshist.c kshist.h : $(OV_CODEGEN_EXE)

#	ACPLT/OV dynov library
#	--------------------------

$(DYNOV_LIB) : $(DYNOV_OBJ)
	$(AR_ARM) rv $@ $?
	$(RANLIB_ARM) $@

$(DYNOV_DLL) : $(DYNOV_OBJ)
	$(LD_ARM) -o $@ $^

dynov.c dynov.h : $(OV_CODEGEN_EXE)

#	ACPLT/OV tasklib library
#	--------------------------

$(TASKLIB_LIB) : $(TASKLIB_OBJ)
	$(AR_ARM) rv $@ $?
	$(RANLIB_ARM) $@

$(TASKLIB_DLL) : $(TASKLIB_OBJ)
	$(LD_ARM) -o $@ $^

tasklib.c tasklib.h : $(OV_CODEGEN_EXE)

#	ACPLT/OV example library
#	------------------------

$(EXAMPLE_LIB) : $(EXAMPLE_OBJ)
	$(AR_ARM) rv $@ $?
	$(RANLIB_ARM) $@

$(EXAMPLE_DLL) : $(EXAMPLE_OBJ)
	$(LD_ARM) -o $@ $^

example.c example.h : $(OV_CODEGEN_EXE)

install:
	cp ov_dbutil /ksbroot/ov/
	cp ov_server /ksbroot/ov/
	cp *.so /ksbroot/ov/

#	Clean up
#	--------

clean :
	@echo Cleaning up...
	@rm -f core *.c ov.h example.h dynov.h kshist.h db_y.h db_lex.h \
		*$(_LIB) *$(_DLL) *$(_OBJ) $(OV_CODEGEN_EXE) $(OV_BUILDER_EXE) \
		$(OV_DBUTIL_EXE) $(OV_SERVER_EXE)
	@for i in *_inst.h ; do echo > $$i ; done
	@echo Done.

#	Include dependencies
#	--------------------


include .depend

