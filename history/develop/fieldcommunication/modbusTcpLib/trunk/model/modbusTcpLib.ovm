#include "ov.ovm"
#include "ksbase.ovm"
#include "TCPbind.ovm"
#include "fb.ovm"

LIBRARY modbusTcpLib
	VERSION   = "V0.1 (DD-Mon-YYYY)";
	AUTHOR    = "";
	COPYRIGHT = "";
	COMMENT   = "";
	
	/**
		ModbusTcpManager is the central point for a modbus tcp master. it coordinates all clients and requests. 
	*/
	CLASS ModbusTcpManager : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
		END_VARIABLES;
		OPERATIONS
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
			getReqId	: C_FUNCTION <MBTCP_FNC_GETREQID>;
		END_OPERATIONS;
	END_CLASS;
	
	
	/**
		The RequestDispatcher takes all incoming data from the channel and parts it into the single requests. These will be handed over to the concerning objects.  
	*/
	CLASS RequestDispatcher : CLASS ksbase/DataHandler
		IS_INSTANTIABLE;
		VARIABLES
		END_VARIABLES;
		OPERATIONS
			/**
			 *	The HandleData function is called by a Channel after some data has arrived for this DataHandler. It gets the pointer to the Channel, a pointer to the received data, and a pointer to the outData variable.
			 *	As this functions gets the pointers to the buffers of the Channel object it has to take care of a few things:
			 *		1. If the input data could be processed or if it is invalid it should be freed.
			 *		2. The Writeptr of the received data may not be altered.
			 *		3. The answers always have to be appended to the answer structure (use the ksbase_KSDATAPACKET_append function).
			 *		4. The readptr of the answer data may not be altered.
			 */
			HandleData	:	C_FUNCTION	<KSBASE_FNC_HANDLEDATA>;
			typemethod  : C_FUNCTION <KSBASE_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	/**
		ModbusTcpSlave represents one slave on the bus. It holds its address data and creates a management shell for the requests and IO-Modules. 
	*/
	CLASS Slave : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			host	:	STRING 
				HAS_SET_ACCESSOR
				FLAGS 	=	"p"
				COMMENT	=	"Hostname or IP address of the slave device"
				INITIALVALUE	=	"";
			port	:	INT
				HAS_SET_ACCESSOR
				FLAGS 	=	"p"
				COMMENT	=	"portnumber of the slave device (default is 502)"
				INITIALVALUE	=	502;
			timeout		:	UINT
				FLAGS	=	"i"
				COMMENT	=	"Timeout for requests to this slave in s (default is 5s)"
				INITIALVALUE	=	5;
			error	:	BOOL
				FLAGS	=	"o"
				COMMENT	=	"Error on a Channel if TRUE"
				INITIALVALUE	=	FALSE;
			ack		:	BOOL
				HAS_SET_ACCESSOR
				FLAGS	=	"i"
				COMMENT	=	"Clear error flag and error assocs"
				INITIALVALUE	=	FALSE;
		END_VARIABLES;
		PARTS
			requests	:	CLASS	ov/domain;
			channel		:	CLASS	TCPbind/TCPChannel;	
			dispatcher	:	CLASS	modbusTcpLib/RequestDispatcher;
		END_PARTS;
		OPERATIONS
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
			constructor	: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
			rename		: C_FUNCTION <OV_FNC_RENAME>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS Request : CLASS ov/object
		VARIABLES
			requestID	:	INT
				COMMENT	=	"This requests ID"
				INITIALVALUE	=	0;
			requestType	:	INT
				COMMENT	=	"This requests command number"
				INITIALVALUE	=	0;
			validTill	:	TIME
				COMMENT	=	"Time at which this request runs out";
			unitIdentifier	:	INT
				COMMENT	=	"Unit identifier (for use with tcp/RTU Gateways)";
			requestStartAddr	:	INT
				COMMENT	=	"Address of the first item in request"
				INITIALVALUE	=	-1;
			requestedItems	:	INT
				COMMENT	=	"Number of items to request"
				INITIALVALUE	=	0;
		END_VARIABLES;
		OPERATIONS
			handleResponse	:	C_FUNCTION	<MBTCP_FNC_HANDLERESPONSE>;
			readWord		:	C_FUNCTION	<MBTCP_FNC_READWORD>;
			writeWord		:	C_FUNCTION	<MBTCP_FNC_WRITEWORD>;
			readBit			:	C_FUNCTION	<MBTCP_FNC_READBIT>;
			writeBit		:	C_FUNCTION	<MBTCP_FNC_WRITEBIT>;
			getaccess		:	C_FUNCTION	<OV_FNC_GETACCESS>;
			destructor		:	C_FUNCTION	<OV_FNC_DESTRUCTOR>;
			addItem			:	C_FUNCTION	<MBTCP_FNC_ADDITEM>;
			sendRequest		:	C_FUNCTION	<MBTCP_FNC_SENDREQUEST> IS_ABSTRACT;
		END_OPERATIONS;
	END_CLASS;

/*	
	CLASS ReadCoilsRequest : CLASS modbusTcpLib/Request
		IS_INSTANTIABLE;
		VARIABLES
		
		END_VARIABLES;
		OPERATIONS
			handleResponse	:	C_FUNCTION	<MBTCP_FNC_HANDLERESPONSE>;
			constructor	: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
			sendRequest		:	C_FUNCTION	<MBTCP_FNC_SENDREQUEST>;
		END_OPERATIONS;
	END_CLASS;
	*/
	CLASS ReadDiscreteInputsRequest : CLASS modbusTcpLib/Request
		IS_INSTANTIABLE;
		VARIABLES
		
		END_VARIABLES;
		OPERATIONS
			handleResponse	:	C_FUNCTION	<MBTCP_FNC_HANDLERESPONSE>;
			constructor	: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
			sendRequest		:	C_FUNCTION	<MBTCP_FNC_SENDREQUEST>;
		END_OPERATIONS;
	END_CLASS;
/*	
	CLASS ReadHoldingRegistersRequest : CLASS modbusTcpLib/Request
		IS_INSTANTIABLE;
		VARIABLES
		
		END_VARIABLES;
		OPERATIONS
			handleResponse	:	C_FUNCTION	<MBTCP_FNC_HANDLERESPONSE>;
			constructor	: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
			sendRequest		:	C_FUNCTION	<MBTCP_FNC_SENDREQUEST>;
		END_OPERATIONS;
	END_CLASS;
*/	
	CLASS ReadInputRegistersRequest : CLASS modbusTcpLib/Request
		IS_INSTANTIABLE;
		VARIABLES
		
		END_VARIABLES;
		OPERATIONS
			handleResponse	:	C_FUNCTION	<MBTCP_FNC_HANDLERESPONSE>;
			constructor	: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
			sendRequest		:	C_FUNCTION	<MBTCP_FNC_SENDREQUEST>;
		END_OPERATIONS;
	END_CLASS;
/*	
	CLASS WriteSingleCoilRequest : CLASS modbusTcpLib/Request
		IS_INSTANTIABLE;
		VARIABLES
		
		END_VARIABLES;
		OPERATIONS
			handleResponse	:	C_FUNCTION	<MBTCP_FNC_HANDLERESPONSE>;
			constructor	: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
			sendRequest		:	C_FUNCTION	<MBTCP_FNC_SENDREQUEST>;
		END_OPERATIONS;
	END_CLASS;

	CLASS WriteSingleRegisterRequest : CLASS modbusTcpLib/Request
		IS_INSTANTIABLE;
		VARIABLES
		
		END_VARIABLES;
		OPERATIONS
			handleResponse	:	C_FUNCTION	<MBTCP_FNC_HANDLERESPONSE>;
			constructor	: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
			sendRequest		:	C_FUNCTION	<MBTCP_FNC_SENDREQUEST>;
		END_OPERATIONS;
	END_CLASS;
*/	
	CLASS WriteMultipleCoilsRequest : CLASS modbusTcpLib/Request
		IS_INSTANTIABLE;
		VARIABLES
		
		END_VARIABLES;
		OPERATIONS
			handleResponse	:	C_FUNCTION	<MBTCP_FNC_HANDLERESPONSE>;
			constructor	: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
			sendRequest		:	C_FUNCTION	<MBTCP_FNC_SENDREQUEST>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS WriteMultipleRegistersRequest : CLASS modbusTcpLib/Request
		IS_INSTANTIABLE;
		VARIABLES
		
		END_VARIABLES;
		OPERATIONS
			handleResponse	:	C_FUNCTION	<MBTCP_FNC_HANDLERESPONSE>;
			constructor	: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
			sendRequest		:	C_FUNCTION	<MBTCP_FNC_SENDREQUEST>;
		END_OPERATIONS;
	END_CLASS;
	
	
	/**
		IOCHannel is the baseclass for coils, registers etc.  
	*/
	CLASS IOChannel : CLASS fb/functionblock
		VARIABLES
			error	:	BOOL
				FLAGS	=	"o"
				COMMENT	=	"If set, there was an error during the request"
				INITIALVALUE	=	FALSE;
			errorCode	:	INT
				FLAGS	=	"o"
				COMMENT	=	"information concerning an error"
				INITIALVALUE	=	0;
			errorText	:	STRING
				FLAGS	=	"o"
				COMMENT	=	"TExtual information concerning error."
				INITIALVALUE	=	"initial state";	
			functionCode	:	INT
				FLAGS	=	"hn"
				COMMENT	=	"modbus function code for requests for this Channel";
			unitIdentifier	:	INT
				FLAGS	=	"p"
				COMMENT	=	"ident number of slave device if it is a modbus RTU slave behind a tcp gateway. Otherwise 0xFF (255)"
				INITIALVALUE	=	255;
			address	:	INT
				HAS_SET_ACCESSOR
				FLAGS	=	"p"
				COMMENT	=	"Channels address in the process image";
		END_VARIABLES;
		OPERATIONS
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
			constructor	: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
			rename		: C_FUNCTION <OV_FNC_RENAME>;
			setErrorText	:	C_FUNCTION	<MBTCP_FNC_SETERRORTEXT>;
		END_OPERATIONS;
	END_CLASS;
	
	/**
		discrete input .
	*/
	CLASS DI : CLASS modbusTcpLib/IOChannel
		IS_INSTANTIABLE;
		VARIABLES
			PV	:	BOOL
				FLAGS	=	"o"
				COMMENT	=	"Process value"
				INITIALVALUE	=	FALSE;
			PVPV	:	BOOL_PV
				FLAGS	=	"o"
				COMMENT	=	"Process value with state and timeStamp";
		END_VARIABLES;
		OPERATIONS
			constructor	: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		END_OPERATIONS;
	END_CLASS;
	
	/**
		discrete output .
	*/
	CLASS DO : CLASS modbusTcpLib/IOChannel
		IS_INSTANTIABLE;
		VARIABLES
			SP	:	BOOL
				FLAGS	=	"i"
				COMMENT	=	"bit to set"
				INITIALVALUE	=	FALSE;
		END_VARIABLES;
		OPERATIONS
			constructor	: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		END_OPERATIONS;
	END_CLASS;
	
	/**
		Analog or Raw input .
	*/
	CLASS AoRI : CLASS modbusTcpLib/IOChannel
		IS_INSTANTIABLE;
		VARIABLES
			RawHi	:	INT
				HAS_SET_ACCESSOR
				FLAGS	=	"p"
				COMMENT	=	"high end of raw values"
				INITIALVALUE	=	32767;
			RawLo	:	INT
				HAS_SET_ACCESSOR
				FLAGS	=	"p"
				COMMENT	=	"low end of raw values"
				INITIALVALUE	=	0;
			PV	:	SINGLE
				FLAGS	=	"o"
				COMMENT	=	"Process value (scaled from 0.0 to 1.0)"
				INITIALVALUE	=	0.0;
			PVPV	:	SINGLE_PV
				FLAGS	=	"o"
				COMMENT	=	"Process value with state and timeStamp";
			PVRaw	:	INT
				FLAGS	=	"o"
				COMMENT	=	"Raw value from process image"
				INITIALVALUE	=	0;
		END_VARIABLES;
		OPERATIONS
			constructor	: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		END_OPERATIONS;
	END_CLASS;
	
	/**
		Analog or Raw output .
	*/
	CLASS AoRO : CLASS modbusTcpLib/IOChannel
		IS_INSTANTIABLE;
		VARIABLES
			RawHi	:	INT
				HAS_SET_ACCESSOR
				FLAGS	=	"p"
				COMMENT	=	"high end of raw values"
				INITIALVALUE	=	32767;
			RawLo	:	INT
				HAS_SET_ACCESSOR
				FLAGS	=	"p"
				COMMENT	=	"low end of raw values"
				INITIALVALUE	=	0;
			rawSwitch	:	BOOL
				FLAGS	=	"p"
				COMMENT	=	"TRUE: use SPRaw; FALSE: use SP"
				INITIALVALUE	=	FALSE;
			SP	:	SINGLE
				HAS_SET_ACCESSOR
				FLAGS	=	"i"
				COMMENT	=	"value to set (scaled from 0.0 to 1.0)"
				INITIALVALUE	=	0.0;
			SPRaw	:	INT
				HAS_SET_ACCESSOR
				FLAGS	=	"i"
				COMMENT	=	"raw value to set (only 2 bytes)"
				INITIALVALUE	=	0;
			FV		:	INT
				FLAGS	=	"hn"
				COMMENT	=	"Value going to the field"
				INITIALVALUE	=	0;
		END_VARIABLES;
		OPERATIONS
			constructor	: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		END_OPERATIONS;
	END_CLASS;
	
	
	/**
		Association between a Request and the first channel in it
		
	*/
	ASSOCIATION requestToChannel : ONE_TO_ONE
		PARENT request : CLASS modbusTcpLib/Request;
		CHILD  firstChannel : CLASS modbusTcpLib/IOChannel;
	END_ASSOCIATION;
	
	ASSOCIATION toNextChannel : ONE_TO_ONE
		PARENT prevChannel : CLASS modbusTcpLib/IOChannel;
		CHILD  nextChannel : CLASS modbusTcpLib/IOChannel;
	END_ASSOCIATION;
	
	ASSOCIATION errorChannels : ONE_TO_ONE
		PARENT slave : CLASS modbusTcpLib/Slave;
		CHILD  errorChannels : CLASS modbusTcpLib/IOChannel;
	END_ASSOCIATION;
	
END_LIBRARY;
