/*
*	Copyright (C) 2011
*	Chair of Process Control Engineering,
*	Aachen University of Technology.
*	All rights reserved.
*
*	Redistribution and use in source and binary forms, with or without
*	modification, are permitted provided that the following conditions
*	are met:
*	1. Redistributions of source code must retain the above copyright
*	   notice, this list of conditions and the following disclaimer.
*	2. Redistributions in binary form must print or display the above
*	   copyright notice either during startup or must have a means for
*	   the user to view the copyright notice.
*	3. Redistributions in binary form must reproduce the above copyright
*	   notice, this list of conditions and the following disclaimer in
*		the documentation and/or other materials provided with the
*		distribution.
*	4. Neither the name of the Chair of Process Control Engineering nor
*		the name of the Aachen University of Technology may be used to
*		endorse or promote products derived from this software without
*		specific prior written permission.
*
*	THIS SOFTWARE IS PROVIDED BY THE CHAIR OF PROCESS CONTROL ENGINEERING
*	``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*	A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE CHAIR OF
*	PROCESS CONTROL ENGINEERING BE LIABLE FOR ANY DIRECT, INDIRECT,
*	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
*	OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
*	AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
*	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
*	WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*	POSSIBILITY OF SUCH DAMAGE.
*
***********************************************************************
*
* CSHMI - Client-Side Human-Machine Interface
*
*	File:
*	------
*	cshmi.ovm
*
*	Editors:
*	--------
*	Je							Holger Jeromin <jeromin@plt.rwth-aachen.de>
*	GQ							Gustavo Quiros <g.quiros@plt.rwth-aachen.de>
*
*	SVN:
*	----
*	$Revision: 1.47 $
*	$Date: 2011-08-09 11:12:26 $
*
*	History:
*	--------
*	20-August-2011			GQ		V0.1.0
*		-	File created
*
***********************************************************************/

#include "ov.ovm"

LIBRARY cshmi

	VERSION		= "0.1";
	AUTHOR		= "Gustavo Quiros, Holger Jeromin, Stefan Schmitz";
	COPYRIGHT	= "Copyright (C) 2011 Lehrstuhl fuer Prozessleittechnik, RWTH Aachen University";
	COMMENT		= "CSHMI - Client-Side Human-Machine Interface";

	CLASS Object : CLASS ov/domain
		COMMENT = "base class for CSHMI objects";
		VARIABLES
			baseKsPath : STRING 
			HAS_ACCESSORS 
			COMMENT = "base KS path for resolution of relative KS paths";
		END_VARIABLES;
	END_CLASS;

	/* Container Elements */

	CLASS ContainerElement : CLASS cshmi/Object
		COMMENT = "base class for container elements";
		OPERATIONS
			constructor					:	C_FUNCTION	<OV_FNC_CONSTRUCTOR>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS Group : CLASS cshmi/ContainerElement
		IS_INSTANTIABLE;
		COMMENT = "a grouping of elements";
		VARIABLES
			x : SINGLE
			HAS_ACCESSORS
			COMMENT = "x-axis coordinate of the rectangle"
			INITIALVALUE = 0.0;
			y : SINGLE
			HAS_ACCESSORS
			COMMENT = "y-axis coordinate of the rectangle"
			INITIALVALUE = 0.0;
			width : SINGLE
			HAS_ACCESSORS
			COMMENT = "width of the rectangle"
			INITIALVALUE = 100.0;
			height : SINGLE
			HAS_ACCESSORS
			COMMENT = "height of the rectangle"
			INITIALVALUE = 100.0;
		END_VARIABLES;
	END_CLASS;
	
	CLASS TemplateDefinition : CLASS cshmi/ContainerElement
		IS_INSTANTIABLE;
		COMMENT = "a grouping of elements with is referenced";
		VARIABLES
			width : SINGLE
			HAS_ACCESSORS
			COMMENT = "width of the rectangle"
			INITIALVALUE = 100.0;
			height : SINGLE
			HAS_ACCESSORS
			COMMENT = "height of the rectangle"
			INITIALVALUE = 100.0;
			hideable : BOOL
			HAS_ACCESSORS
			COMMENT = "should this object be hidden if clicked on parent?"
			INITIALVALUE = FALSE;
		END_VARIABLES;
	END_CLASS;
	
	CLASS csContainer : CLASS cshmi/ContainerElement
		IS_INSTANTIABLE;
		COMMENT = "internal class for container elements as parts of ifThenElse";
	END_CLASS;
	
	/* Graphical Elements */


/* TODO rotate */

	CLASS Element : CLASS cshmi/Object
		COMMENT = "base class for graphical elements";
		VARIABLES
			visible : BOOL
			HAS_ACCESSORS
			COMMENT = "the element is visible"
			INITIALVALUE = TRUE;
			zindex	: UINT
			HAS_ACCESSORS
			COMMENT = "z-index of the component, 0 is least visible (i.e. bottom)"
			INITIALVALUE = 0;
			stroke : STRING
			HAS_ACCESSORS
			COMMENT = "line stroke color (CSS color name or hex like #000000)"
			INITIALVALUE = "black";
			fill : STRING
			HAS_ACCESSORS
			COMMENT = "fill color (CSS color name or hex like #000000)"
			INITIALVALUE = "none";
			opacity : SINGLE
			HAS_ACCESSORS
			COMMENT = "opacity of the element ([0.0-1.0])"
			INITIALVALUE = 1.0;
		END_VARIABLES;
		OPERATIONS
			constructor					:	C_FUNCTION	<OV_FNC_CONSTRUCTOR>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS Template : CLASS cshmi/Element
		IS_INSTANTIABLE;
		COMMENT = "a reference to a TemplateDefinition";
		VARIABLES
			TemplateDefinition : STRING
			HAS_ACCESSORS
			COMMENT = "Path to the TemplateDefinition";
			x : SINGLE
			HAS_ACCESSORS
			COMMENT = "x-axis coordinate of the Template"
			INITIALVALUE = 0.0;
			y : SINGLE
			HAS_ACCESSORS
			COMMENT = "y-axis coordinate of the Template"
			INITIALVALUE = 0.0;
			FBReference[] : STRING
			HAS_ACCESSORS
			COMMENT = "Path of the Reference object (multiple values possible, when named as pump47:/TechUnits/Pump47)";
			ConfigValues[] : STRING
			HAS_ACCESSORS
			COMMENT = "Free text value for TemplateDefinition (multiple key1:value1 possible)";
		END_VARIABLES;
	END_CLASS;
	
	CLASS Line : CLASS cshmi/Element
		IS_INSTANTIABLE;
		COMMENT = "a line";
		VARIABLES
			x1 : SINGLE
			HAS_ACCESSORS
			COMMENT = "x-axis coordinate of starting point"
			INITIALVALUE = 0.0;
			y1 : SINGLE 
			HAS_ACCESSORS
			COMMENT = "y-axis coordinate of starting point"
			INITIALVALUE = 0.0;
			x2 : SINGLE
			HAS_ACCESSORS
			COMMENT = "x-axis coordinate of ending point"
			INITIALVALUE = 10.0;
			y2 : SINGLE
			HAS_ACCESSORS
			COMMENT = "y-axis coordinate of ending point"
			INITIALVALUE = 0.0;
		END_VARIABLES;
	END_CLASS;

	CLASS Rectangle : CLASS cshmi/Element
		IS_INSTANTIABLE;
		COMMENT = "a rectangle";
		VARIABLES
			x : SINGLE
			HAS_ACCESSORS
			COMMENT = "x-axis coordinate of the rectangle"
			INITIALVALUE = 0.0;
			y : SINGLE
			HAS_ACCESSORS
			COMMENT = "y-axis coordinate of the rectangle"
			INITIALVALUE = 0.0;
			width : SINGLE
			HAS_ACCESSORS
			COMMENT = "width of the rectangle"
			INITIALVALUE = 100.0;
			height : SINGLE
			HAS_ACCESSORS
			COMMENT = "height of the rectangle"
			INITIALVALUE = 100.0;
		END_VARIABLES;
	END_CLASS;

	CLASS Circle : CLASS cshmi/Element
		IS_INSTANTIABLE;
		COMMENT = "a circle";
		VARIABLES
			cx : SINGLE
			HAS_ACCESSORS
			COMMENT = "x-axis coordinate of the center of the circle"
			INITIALVALUE = 10.0;
			cy : SINGLE
			HAS_ACCESSORS
			COMMENT = "y-axis coordinate of the center of the circle"
			INITIALVALUE = 10.0;
			r : SINGLE
			HAS_ACCESSORS
			COMMENT = "radius of the circle"
			INITIALVALUE = 10.0;
		END_VARIABLES;
	END_CLASS;

	CLASS Ellipse : CLASS cshmi/Element
		IS_INSTANTIABLE;
		COMMENT = "an ellipse";
		VARIABLES
			cx : SINGLE
			HAS_ACCESSORS
			COMMENT = "x-axis coordinate of the center of the ellipse"
			INITIALVALUE = 10.0;
			cy : SINGLE
			HAS_ACCESSORS
			COMMENT = "y-axis coordinate of the center of the ellipse"
			INITIALVALUE = 5.0;
			rx : SINGLE
			HAS_ACCESSORS
			COMMENT = "x-axis radius of the ellipse"
			INITIALVALUE = 10.0;
			ry : SINGLE
			HAS_ACCESSORS
			COMMENT = "y-axis radius of the ellipse"
			INITIALVALUE = 5.0;
		END_VARIABLES;
	END_CLASS;

	CLASS Path : CLASS cshmi/Element
		IS_INSTANTIABLE;
		COMMENT = "a path";
		VARIABLES
			d : STRING
			HAS_ACCESSORS
			COMMENT = "definition of the outline of a shape";
		END_VARIABLES;
	END_CLASS;

	CLASS Polygon : CLASS cshmi/Element
		IS_INSTANTIABLE;
		COMMENT = "a polygon";
		VARIABLES
			points : STRING
			HAS_ACCESSORS
			COMMENT = "points that make up the polygon (split with spaces)";
		END_VARIABLES;
	END_CLASS;

	CLASS Polyline : CLASS cshmi/Element
		IS_INSTANTIABLE;
		COMMENT = "a polyline";
		VARIABLES
			points : STRING
			HAS_ACCESSORS
			COMMENT = "points that make up the polyline (split with spaces)";
		END_VARIABLES;
	END_CLASS;

	CLASS Text : CLASS cshmi/Element
		IS_INSTANTIABLE;
		COMMENT = "text";
		VARIABLES
			x : SINGLE
			HAS_ACCESSORS
			COMMENT = "x-axis coordinate of the text starting position"
			INITIALVALUE = 10.0;
			y : SINGLE
			HAS_ACCESSORS
			COMMENT = "y-axis coordinate of the text starting position"
			INITIALVALUE = 10.0;
			content : STRING
			HAS_ACCESSORS
			COMMENT = "text content";
			fontSize : STRING
			HAS_ACCESSORS
			COMMENT = "font size (keyword or 12px)"
			INITIALVALUE = "medium";
			fontStyle : STRING
			HAS_ACCESSORS
			COMMENT = "font style ('normal','italic','oblique')"
			INITIALVALUE = "normal";
			fontWeight : STRING
			HAS_ACCESSORS
			COMMENT = "font weight (keyword: 'normal','bold','lighter','bolder')"
			INITIALVALUE = "normal";
			fontFamily : STRING
			HAS_ACCESSORS
			COMMENT = "font family (family name or keyword: 'serif','sans-serif','monospace')"
			INITIALVALUE = "serif";
			horAlignment : STRING
			HAS_ACCESSORS
			COMMENT = "text anchor (horizontal alignment; keyword: 'start','middle','end')"
			INITIALVALUE = "start";
			verAlignment : STRING
			HAS_ACCESSORS
			COMMENT = "dominant baseline (vertical alignment; keyword: 'auto','middle','hanging')"
			INITIALVALUE = "auto";
		END_VARIABLES;
		OPERATIONS
			constructor					:	C_FUNCTION	<OV_FNC_CONSTRUCTOR>;
		END_OPERATIONS;
	END_CLASS;

	/* Actions */

	CLASS Action : CLASS cshmi/Object
		COMMENT = "base class for actions";
		OPERATIONS
			constructor					:	C_FUNCTION	<OV_FNC_CONSTRUCTOR>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS GetValue : CLASS cshmi/Action
		IS_INSTANTIABLE;
		COMMENT = "get a value, either constant or from a variable";
		VARIABLES
			ksVar : STRING
			HAS_ACCESSORS
			COMMENT = "path of the remote KS variable";
			elemVar : STRING
			HAS_ACCESSORS
			COMMENT = "name of the element variable";
			elemVarPath : STRING
			HAS_ACCESSORS
			COMMENT = "the (relative) path to the element";
			globalVar : STRING
			HAS_ACCESSORS
			COMMENT = "name of the global variable";
			eventVar : STRING
			HAS_ACCESSORS
			COMMENT = "name of the event variable";
			TemplateFBReferenceVariable : STRING
			HAS_ACCESSORS
			COMMENT = "name of a variable of a referenced FB object";
			TemplateConfigValues : STRING
			HAS_ACCESSORS
			COMMENT = "name of the key of a ConfigValue";
			value : ANY
			HAS_ACCESSORS
			COMMENT = "value";
		END_VARIABLES;
	END_CLASS;
	
	CLASS SetValue : CLASS cshmi/Action
		IS_INSTANTIABLE;
		COMMENT = "set a variable with a value";
		VARIABLES
			ksVar : STRING
			HAS_ACCESSORS
			COMMENT = "path of the target remote KS variable";
			elemVar : STRING
			HAS_ACCESSORS
			COMMENT = "name of the target element variable";
			elemVarPath : STRING
			HAS_ACCESSORS
			COMMENT = "the (relative) path to the element";
			TemplateFBReferenceVariable : STRING
			HAS_ACCESSORS
			COMMENT = "name of a variable of a referenced FB object";
			globalVar : STRING
			HAS_ACCESSORS
			COMMENT = "name of the target global variable";
		END_VARIABLES;
		PARTS
			value : CLASS cshmi/GetValue;
		END_PARTS;
	END_CLASS;

	CLASS IfThenElse : CLASS cshmi/Action
		IS_INSTANTIABLE;
		COMMENT = "a conditional action (if <conditions> then <actions> else <actions>)";
		VARIABLES
			anycond : BOOL
			HAS_ACCESSORS
			COMMENT = "then-actions are executed if any condition is true (logical or)"
			INITIALVALUE = FALSE;
		END_VARIABLES;
		PARTS
			if : CLASS cshmi/csContainer;
			then : CLASS cshmi/csContainer;
			else : CLASS cshmi/csContainer;
		END_PARTS;
	END_CLASS;

	/* Conditions */
	
	CLASS Condition : CLASS cshmi/Object
		COMMENT = "base class for conditions";
		OPERATIONS
			constructor					:	C_FUNCTION	<OV_FNC_CONSTRUCTOR>;
		END_OPERATIONS;
	END_CLASS;

	CLASS Compare : CLASS cshmi/Condition
		IS_INSTANTIABLE;
		COMMENT = "a comparison condition (<value1> <comptype> <value2>)";
		VARIABLES
			comptype : STRING
			HAS_ACCESSORS
			COMMENT = "comparison type ('<','<=','==','!=','>=','>')"
			INITIALVALUE = "==";
		END_VARIABLES;
		PARTS
			value1 : CLASS cshmi/GetValue;
			value2 : CLASS cshmi/GetValue;
		END_PARTS;
	END_CLASS;

	/* Events */
	
	CLASS Event : CLASS cshmi/Object
		COMMENT = "an HMI gesture (i.e. a GUI event)";
	END_CLASS;
	
	CLASS OperatorEvent : CLASS cshmi/Event
		IS_INSTANTIABLE;
		COMMENT = "an HMI gesture (i.e. an event from the operator); the identifier could be click, doubleclick, rightclick";
		OPERATIONS
			constructor					:	C_FUNCTION	<OV_FNC_CONSTRUCTOR>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS ServerEvent : CLASS cshmi/Event
		IS_INSTANTIABLE;
		COMMENT = "an HMI gesture (i.e. an event from the server)";
	END_CLASS;
	
	CLASS TimeEvent : CLASS cshmi/Event
		IS_INSTANTIABLE;
		COMMENT = "time triggered actions";
		VARIABLES
			cyctime : TIME_SPAN
			HAS_ACCESSORS
			COMMENT = "the cycle time for the execution of the action"
			INITIALVALUE = 00:00:10;
		END_VARIABLES;
	END_CLASS;
	
	CLASS ClientEvent : CLASS cshmi/Event
		IS_INSTANTIABLE;
		COMMENT = "client triggered actions; the identifier could be onload";
		OPERATIONS
			constructor					:	C_FUNCTION	<OV_FNC_CONSTRUCTOR>;
		END_OPERATIONS;
	END_CLASS;

END_LIBRARY;
