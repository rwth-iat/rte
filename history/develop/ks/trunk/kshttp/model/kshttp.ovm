/*
*	Copyright (C) 2015
*	Chair of Process Control Engineering,
*	Aachen University of Technology.
*	All rights reserved.
*
*	Redistribution and use in source and binary forms, with or without
*	modification, are permitted provided that the following conditions
*	are met:
*	1. Redistributions of source code must retain the above copyright
*	   notice, this list of conditions and the following disclaimer.
*	2. Redistributions in binary form must print or display the above
*	   copyright notice either during startup or must have a means for
*	   the user to view the copyright notice.
*	3. Redistributions in binary form must reproduce the above copyright
*	   notice, this list of conditions and the following disclaimer in
*		the documentation and/or other materials provided with the
*		distribution.
*	4. Neither the name of the Chair of Process Control Engineering nor
*		the name of the Aachen University of Technology may be used to
*		endorse or promote products derived from this software without
*		specific prior written permission.
*
*	THIS SOFTWARE IS PROVIDED BY THE CHAIR OF PROCESS CONTROL ENGINEERING
*	``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*	A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE CHAIR OF
*	PROCESS CONTROL ENGINEERING BE LIABLE FOR ANY DIRECT, INDIRECT,
*	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
*	OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
*	AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
*	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
*	WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*	POSSIBILITY OF SUCH DAMAGE.
*
***********************************************************************/

#include "ksbase.ovm"

LIBRARY kshttp
	VERSION   = "V2.0 (14-Nov-2014)";
	AUTHOR    = "Sten Gruener, Henning Mersch, Holger Jeromin";
	COPYRIGHT	= "Copyright (C) 2014 Lehrstuhl fuer Prozessleittechnik, RWTH Aachen University";
	COMMENT		= "HTTP Webserver and Webclient with lightweight KS and static file support";
	
	/**
	 *	Checks whether received data is conforming to the http protocol
	 *	Criteria are: first byte equals the allowed HTTP methods
	 */
	CLASS httpIdentificator : CLASS ksbase/ProtocolIdentificator
		IS_INSTANTIABLE;
		COMMENT = "class for identifing http communication";
		VARIABLES
			AllowedMethods[]	:	STRING
			INITIALVALUE = {"GET", "POST", "HEAD", "PUT", "PROPPATCH", "PROPFIND", "DELETE", "MOVE", "LINK", "UNLINK", "OPTIONS"};
		END_VARIABLES;
		OPERATIONS
			constructor		:	C_FUNCTION	<OV_FNC_CONSTRUCTOR>;
			identify		:	C_FUNCTION <KSBASE_FNC_IDENTIFY>;
			createClientHandler	:	C_FUNCTION	<KSBASE_FNC_CREATECH>;
		END_OPERATIONS;
	END_CLASS;

	/**
		handles on TCP Connection to a http client
	*/
	CLASS httpclienthandler : CLASS ksbase/ClientHandler
	IS_INSTANTIABLE;
	COMMENT	=	"Handler for HTTP-ks clients. Processes incoming HTTP-messages and calls the respective operations (GETEP, GETVAR, etc.)";
	VARIABLES
		ClientRequest :	C_TYPE	<HTTP_REQUEST> COMMENT	=	"Structured Data for the HTTP request.";
		ServerResponse :	C_TYPE	<HTTP_RESPONSE> COMMENT	=	"Structured Data for the HTTP response.";
		CommunicationStatus : C_TYPE <HTTP_COMMUNICATIONSTATUS>;
	END_VARIABLES;
	OPERATIONS
		/**
		 *	The HandleRequest function is called by a Channel after some data has arrived for this ClientHandler. It gets the pointer to the Channel, a pointer to the received data, and a pointer to the outData variable.
		 *	As this functions gets the pointers to the buffers of the Channel object it has to take care of a few things:
		 *		1. If the input data could be processed or if it is invalid it should be freed.
		 *		2. The Writeptr of the received data may not be altered.
		 *		3. The answers always have to be appended to the answer structure (use the ksbase_KSDATAPACKET_append function).
		 *		4. The readptr of the answer data may not be altered.
		 */
		HandleRequest		:	C_FUNCTION	<KSBASE_FNC_HANDLEREQUEST>;	
		startup				:	C_FUNCTION	<OV_FNC_STARTUP>;
		shutdown			:	C_FUNCTION	<OV_FNC_SHUTDOWN>;
		/**
		 * if a httpClientHandlerExtension want to make further http communication it is recommended to use these methods
		 */
		analyzeRequestHeader:	C_FUNCTION	<KSHTTP_FNC_INDATAHANDLING>;
		analyzeRequestBody	:	C_FUNCTION	<KSHTTP_FNC_INDATAHANDLING>;
		generateHttpBody	:	C_FUNCTION	<KSHTTP_FNC_GENERATEKSBODY>;
		generateHttpHeader	:	C_FUNCTION	<KSHTTP_FNC_GENERATEHEADER>;
		mapresult2http		:	C_FUNCTION	<KSHTTP_FNC_RESULT2HTTP>;
		sendHttpHeader		:	C_FUNCTION	<KSHTTP_FNC_OUTPACKETHANDLING>;
		sendHttpBody		:	C_FUNCTION	<KSHTTP_FNC_OUTPACKETHANDLING>;
	END_OPERATIONS;	
	END_CLASS;
	
	/**
		handles a Server-sent events (SSE)
	*/
	CLASS getvarpushhandler : CLASS ksbase/ClientHandler
		IS_INSTANTIABLE;
		COMMENT	=	"Handler for getvar push via Server-sent events (SSE).";
		VARIABLES
			responseformat : INT COMMENT = "FORMATUNDEFINED=0, KSTCL=1, PLAIN=2, KSX=3" INITIALVALUE=0;
			urlQuery[] : STRING COMMENT = "query of the requested url";
			responseSent : STRING COMMENT = "cache for the response to look for changes" INITIALVALUE = ""; //streambuffer
		END_VARIABLES;
		OPERATIONS
			HandleRequest	:	C_FUNCTION	<KSBASE_FNC_HANDLEREQUEST>;	
			typemethod		:	C_FUNCTION	<KSBASE_FNC_TYPEMETHOD>;
		END_OPERATIONS;	
	END_CLASS;
	
	/**
 	*	Baseclass for clientHandler Extensions belonging to the kshttp protocol
 	*	if the http clientHandler instance cannot handle a requested operation (determined by the http urlpath)
 	*	it will iterate over all instances of this class and check if the urlpath is listed in the commandList
 	*	vector. If so the handle request function is called. If this sets HTTP_CS_CHANNELRESPONSIBILITYRELEASED 
 	*	the client handler will do nothing on this channel anymore (probably best to change ksbase_AssocChannelClientHandler to you)
 	*/
 	CLASS	httpClientHandlerExtension			:	CLASS ksbase/baseClientHandlerExtension
		COMMENT	=	"Baseclass for client handler extensions for the kshttp protocol";
		VARIABLES
			commandList[]	:	STRING
				COMMENT	=	"Array of commands this extension can handle for example '/getHist' or '/callservice' (wildcards '?' single char, '*' multiple chars are possible";
		END_VARIABLES;
		OPERATIONS
			HandleExtendedRequest	:	C_FUNCTION	<KSHTTP_FNC_HANDLEEXTREQUEST> IS_ABSTRACT;
			HandleRequest			:	C_FUNCTION	<KSBASE_FNC_HANDLEREQUEST>; 	/* not every extention need this */
	END_OPERATIONS;	
	END_CLASS;	
	
	CLASS httpSimpleTicketAuthenticator	:	CLASS ksbase/TicketAuthenticator
	IS_INSTANTIABLE;
	COMMENT	=	"Authenticator for simple tickets transportes via ks-http";
	OPERATIONS
		constructor		:	C_FUNCTION	<OV_FNC_CONSTRUCTOR>;
 		startup			:	C_FUNCTION	<OV_FNC_STARTUP>;
 		shutdown		:	C_FUNCTION	<OV_FNC_SHUTDOWN>;
		/*
 		*	These functions conform to the prototypes in a OV_TICKET_VTBL they are linked to the ticket itself to conform to ov-standards.
 		*	The functions do NOT get a this-pointer. Hence TicketAuthenticators have to be Singletons!!! 
 		*/
 		createticket	:	C_FUNCTION	<KSBASE_FNC_CREATETICKET>;
 		deleteticket	:	C_FUNCTION	<KSBASE_FNC_DELETETICKET>;
		encodereply		:	C_FUNCTION	<KSBASE_FNC_ENCODEREPLY>;
		TicketGetaccess	:	C_FUNCTION	<KSBASE_FNC_GETACCESS>;
	END_OPERATIONS;	
	END_CLASS;
	
	
	CLASS httpManagerCom	:	CLASS ksbase/ComTask
	IS_INSTANTIABLE;
	COMMENT	=	"Instances of this class register the server at the ks-Manager periodically. If not specified otherwise as commandline option a TCPChannel is used. If the server is Manager itself a direct ov shortcut is used.";
	VARIABLES
		ManagerPort	:	STRING
			COMMENT	=	"Port part of Manager address"
			INITIALVALUE = "7509";
		OwnPort		:	STRING
			COMMENT	=	"Port this server listens on"
			INITIALVALUE	=	"";
		UseShortCut	:	BOOL
			COMMENT	=	"use the ov-shortcut (do not create a channel)"
			INITIALVALUE = FALSE;
		RegisterState	:	UINT
			COMMENT	=	"State of registration: 0 not registered, 1 waiting for answer, 2 registered, 128 register error"
			INITIALVALUE = 0;
		Tries		:	UINT
			COMMENT	=	"Tries before successfull register. 5 is maximum"
			INITIALVALUE = 0;
	END_VARIABLES;	
	OPERATIONS
		startup		:	C_FUNCTION	<OV_FNC_STARTUP>;
		shutdown	:	C_FUNCTION	<OV_FNC_SHUTDOWN>;
		typemethod  :	C_FUNCTION	<KSBASE_FNC_TYPEMETHOD>;
	END_OPERATIONS;
	END_CLASS;
	
	CLASS	httpClientBase	:	CLASS	ksbase/ClientBase
		COMMENT	=	"http message generation and reply processing";
		VARIABLES
			httpParseStatus	:	UINT
				FLAGS = "o"
				COMMENT	=	"0 = new, 200 = accepted, 206 = headeraccepted, 400 = denied, 500 = out of memory, 507 = database out of memory"
				INITIALVALUE = 0;
			httpStatusCode	:	UINT
				FLAGS = "o"
				COMMENT	=	"HTTP Statuscode"
				INITIALVALUE = 0;
			tempCallback	:	C_TYPE	<KSBASE_CALLBACKSTRUCT>
				COMMENT	=	"Structure containing pointer to the calling instance and to the callbackfunction. Pointer to instance is only used as a parameter to the callbackfunction.";
			ServerResponse	:	C_TYPE	<HTTP_RESPONSE>
				COMMENT	=	"Structured Data for the HTTP response.";
		END_VARIABLES;
		OPERATIONS
			reset				:	C_FUNCTION	<KSBASE_FNC_RESET>;
			typemethod 			: 	C_FUNCTION	<KSBASE_FNC_TYPEMETHOD>;
			HandleData			:	C_FUNCTION	<KSBASE_FNC_HANDLEDATA>;
			startup				:	C_FUNCTION	<OV_FNC_STARTUP>;
			shutdown			:	C_FUNCTION	<OV_FNC_SHUTDOWN>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS	httpClient	:	CLASS	kshttp/httpClientBase
		IS_INSTANTIABLE;
		COMMENT	=	"ks message generation and reply processing for http protocol";
		VARIABLES
			ManagerPort	:	STRING
				COMMENT	=	"Port of MANAGER on remote server. Default is 7509 (IANA service acplt)"
				INITIALVALUE	=	"7509";
		END_VARIABLES;
		OPERATIONS
			/**
			*	For each ks-service there is a generate function that generates the request message and a process function that processes the server's answer
			*/
			requestRegister		:	C_FUNCTION	<KSBASE_FNC_REQREG>;
			processRegister		:	C_FUNCTION	<KSBASE_FNC_PROCREG>;
			requestUnRegister	:	C_FUNCTION	<KSBASE_FNC_REQUNREG>;
			processUnRegister	:	C_FUNCTION	<KSBASE_FNC_PROCUNREG>;
		END_OPERATIONS;
	END_CLASS;

	CLASS	genericHttpClient	:	CLASS	kshttp/httpClientBase
		IS_INSTANTIABLE;
		COMMENT	=	"generic client to communicate with an http server";
		VARIABLES
			beginCommunication	:	BOOL HAS_SET_ACCESSOR
				COMMENT	=	"send request"
				INITIALVALUE	=	FALSE;
			URI	:	STRING HAS_SET_ACCESSOR
				COMMENT	=	"Uniform Resource Identifier to fetch"
				INITIALVALUE	=	"http://localhost:7509/";
			messageBody	:	STRING
				FLAGS = "o"
				COMMENT	=	"Response of the server if mimetype is text/*, application/xml, application/xml-dtd, *+xml, application/json, application/javascript"
				INITIALVALUE	=	"";
			contentLength	:	UINT
				FLAGS = "o"
				COMMENT	=	"length of request"
				INITIALVALUE	=	0;
			contentType	:	STRING
				FLAGS = "o"
				COMMENT	=	"Content-Type of the response"
				INITIALVALUE	=	"";
		END_VARIABLES;
		OPERATIONS
			reset				:	C_FUNCTION	<KSBASE_FNC_RESET>;
			constructor		:	C_FUNCTION	<OV_FNC_CONSTRUCTOR>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS authenticatedsession : CLASS ov/object
		IS_INSTANTIABLE;
		COMMENT = "class holding security authenticated sessions";
		VARIABLES
			nonce : STRING; //connection nounce for http authorization
			securitylevel : INT INITIALVALUE=0; //highest level of security that has been verified on this connection
			lastactivity : TIME HAS_ACCESSORS;
			uncheckedaccess : INT INITIALVALUE=0; //number of times the password has not been verified
		END_VARIABLES;
	END_CLASS;
	
	CLASS staticfile : CLASS ov/object
		IS_INSTANTIABLE;
		COMMENT = "class for providing static content, file with name n.html is accessible under localhost:8080/n.html and shows the content of the content field. Mimetype and encoding have generic HTTP meaning.";
		VARIABLES
			content : STRING HAS_ACCESSORS INITIALVALUE="";
			mimetype : STRING HAS_ACCESSORS INITIALVALUE="text/html";
			encoding : STRING HAS_ACCESSORS INITIALVALUE="";
		END_VARIABLES;	
	END_CLASS;
	
END_LIBRARY;
