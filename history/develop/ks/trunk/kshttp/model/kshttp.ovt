/**
 *	KSHTTP_RESPONSEFORMAT
 *	output format for response
 **/
typedef enum KSHTTP_RESPONSEFORMAT {
	FORMATUNDEFINED=0,TCL=1,PLAIN=2,KSX=3,JSON=4,FORMATDEFAULT=TCL
} KSHTTP_RESPONSEFORMAT;

typedef enum KSHTTP_REQUESTHANDLEDBY {
	NONE,GETVAR,GETVARSTREAM,SETVAR,GETEP,GETHANDLE,DELHANDLE,HTTPAUTH,CORSOPTION,STATICFILE,CREATEOBJECT,DELETEOBJECT,RENAMEOBJECT,LINK,UNLINK,GETSERVER,REGISTER,UNREGISTER,GETLOGFILE,CLIENTHANDLEREXT
} KSHTTP_REQUESTHANDLEDBY;

/**
 *	KSHTTP_REQUEST
 *	This structure is used for decoded transmitted data.
 */
typedef struct{
	OV_STRING requestHeader;
	OV_STRING cmd;
	OV_STRING version;
	OV_STRING host;
	OV_STRING_VEC args;
	KSHTTP_RESPONSEFORMAT response_format;
	OV_UINT headerLength;
	OV_UINT contentLength;
	OV_BYTE* messageBody;
	OV_STRING requestMethod;
	OV_BOOL gzipAccepted;
	OV_BOOL keepAlive;
} KSHTTP_REQUEST;

/**
 *	KSHTTP_RESPONSE
 *	This structure is used for decoded transmitted data.
 */
typedef struct{
	OV_STRING version;
	OV_INT statusCode;
	OV_UINT headerLength;
	OV_STRING header;
	OV_STRING contentString; /* content send from the server back to the client */
	OV_BYTE* contentBinary; /* will be used if contentString is empty */
	OV_UINT contentLength;
	OV_STRING contentType;
	OV_STRING contentEncoding;
	OV_BOOL transferEncodingChunked;
} KSHTTP_RESPONSE;
