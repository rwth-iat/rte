#ifndef ksbase_OVF_INCLUDED
#define ksbase_OVF_INCLUDED

#include "ov_ksserver_backend.h"

//is called by execute to determine if executime of Task is reached
typedef OV_DLLFNCEXPORT OV_BOOL KSBASE_FNC_CALCEXEC (
	OV_INSTPTR_ksbase_ComTask	this
);

//needs to be implemted by inherrited classes
typedef OV_DLLFNCEXPORT void KSBASE_FNC_TYPEMETHOD (
	OV_INSTPTR_ksbase_ComTask	this
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_REGISTER (
	OV_STRING name, 
	OV_INT version,
	OV_STRING protocol,
	OV_STRING port,
	OV_UINT timetolive
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_UNREGISTER (
	OV_STRING name, 
	OV_INT version,
	OV_STRING protocol
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_GETSERVERDATA (
	OV_STRING name, 
	OV_INT version,
	OV_STRING_VEC* protocols,
	OV_STRING_VEC* ports,
	OV_UINT* TimeToLive,
	OV_TIME* ExpirationTime,
	OV_INT*  registeredVersion
);

typedef OV_DLLFNCEXPORT OV_BOOL KSBASE_FNC_IDENTIFY (
	OV_INSTPTR_ksbase_ProtocolIdentificator this,
	OV_INSTPTR_ksbase_Channel pchannel
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_CREATECH (
	OV_INSTPTR_ksbase_ProtocolIdentificator this,
	OV_INSTPTR_ksbase_Channel pchannel
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_SENDDATA(
	OV_INSTPTR_ksbase_Channel this
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_OPENLOCAL(
	OV_INSTPTR_ksbase_Channel this,
	OV_STRING port
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_OPENCONN(
	OV_INSTPTR_ksbase_Channel this,
	OV_STRING host,
	OV_STRING port
);

typedef OV_DLLFNCEXPORT void KSBASE_FNC_CLOSECONN(
	OV_INSTPTR_ksbase_Channel this
);


/**
 * The HandleRequest function is called by a channel object when there is data for this ClientHandler.
 * @param OV_INSTPTR_ksbase_ClientHandler this: a pointer to the ClientHandler itself
 * @param KS_DATAPACKET* dataReceived: the received data the ClientHandler has to work with. The calling Channel will set this to its inData variable
 * @param KS_DATAPACKET* answer: the answer generated by the ClientHandler. The calling Channel  will set this to its outData variable
 */
typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_HANDLEREQUEST(
	OV_INSTPTR_ksbase_ClientHandler this,
	KS_DATAPACKET* dataReceived,
	KS_DATAPACKET* answer
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_HANDLEDATA(
	OV_INSTPTR_ksbase_DataHandler this,
	KS_DATAPACKET* dataReceived,
	KS_DATAPACKET* answer
);

typedef OV_DLLFNCEXPORT OV_TICKET* KSBASE_FNC_CREATETICKET(
	void *data,
	OV_TICKET_TYPE type
);

typedef OV_DLLFNCEXPORT void KSBASE_FNC_DELETETICKET(
	OV_TICKET *pticket
);

typedef OV_DLLFNCEXPORT OV_BOOL KSBASE_FNC_ENCODEREPLY(
	void *data, 
	OV_TICKET *pticket
);


typedef OV_DLLFNCEXPORT OV_ACCESS KSBASE_FNC_GETACCESS(
	const OV_TICKET *pticket
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_ENCODETICKET(
	OV_INSTPTR_ksbase_ClientTicketGenerator this,
	KS_DATAPACKET* datapacket
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_DECODEREPLY(
	OV_INSTPTR_ksbase_ClientTicketGenerator this,
	KS_DATAPACKET* datapacket
);

typedef OV_DLLFNCEXPORT	OV_RESULT KSBASE_FNC_RESET(
	OV_INSTPTR_ksbase_ClientBase this
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_REQREG(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	const OV_STRING servername,
	const OV_UINT	version,
	const OV_UINT port,
	const OV_UINT ttl,
	const OV_INSTPTR_ov_domain	callbackThat,
	void (*callback)(const OV_INSTPTR_ov_domain this, const OV_INSTPTR_ov_domain that)	
);
	
	
typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_PROCREG(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	OV_RESULT* result
);
			
typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_REQUNREG(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	const OV_STRING servername,
	const OV_UINT version,
	const OV_INSTPTR_ov_domain	callbackThat,
	void (*callback)(const OV_INSTPTR_ov_domain this, const OV_INSTPTR_ov_domain that)		
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_PROCUNREG(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	OV_RESULT* result
);


typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_REQGETSRV(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	const OV_STRING servername,
	const OV_UINT leastVersion,
	const OV_INSTPTR_ov_domain	callbackThat,
	void (*callback)(const OV_INSTPTR_ov_domain this, const OV_INSTPTR_ov_domain that)		
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_PROCGETSRV(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	OV_RESULT* result,
	OV_STRING* servername,
	OV_UINT* regVersion,
	OV_STRING* port,
	OV_TIME* expirationTime,
	OV_UINT* serverState
);

/*	the dummy-parameter is here to be complete. these 4 bytes are not decoded right now, but they are always sent. maybe they will be used in the future, so...	*/
typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_REQGETPP(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	const OV_STRING path,
	const OV_OBJ_TYPE typeMask,
	const OV_STRING	nameMask,
	const OV_UINT dummy,
	const OV_INSTPTR_ov_domain	callbackThat,
	void (*callback)(const OV_INSTPTR_ov_domain this, const OV_INSTPTR_ov_domain that)		
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_PROCGETPP(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	OV_RESULT* result,
	OV_UINT* items_len,
	OV_OBJ_PROJECTED_PROPS** items_val
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_REQGETEP(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	const OV_STRING path,
	const OV_OBJ_TYPE typeMask,
	const OV_STRING	nameMask,
	const OV_EP_FLAGS scopeFlags,
	const OV_INSTPTR_ov_domain	callbackThat,
	void (*callback)(const OV_INSTPTR_ov_domain this, const OV_INSTPTR_ov_domain that)	
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_PROCGETEP(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	OV_RESULT* result,
	OV_UINT* items_len,
	OV_OBJ_ENGINEERED_PROPS** items_val
);


typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_REQGETVAR(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	const OV_UINT items_length,
	const OV_STRING* paths,
	const OV_INSTPTR_ov_domain	callbackThat,
	void (*callback)(const OV_INSTPTR_ov_domain this, const OV_INSTPTR_ov_domain that)	
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_PROCGETVAR(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	OV_RESULT* result,
	OV_UINT* items_len,
	OV_GETVAR_ITEM** items_val
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_REQSETVAR(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	const OV_UINT items_length,
	const OV_SETVAR_ITEM* items_val,
	const OV_INSTPTR_ov_domain	callbackThat,
	void (*callback)(const OV_INSTPTR_ov_domain this, const OV_INSTPTR_ov_domain that)		
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_PROCSETVAR(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	OV_RESULT* result,
	OV_UINT* items_length,
	OV_RESULT** items_results
);
			
typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_REQGETCANONPATH(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	const OV_UINT items_length,
	const OV_STRING* paths,
	const OV_INSTPTR_ov_domain	callbackThat,
	void (*callback)(const OV_INSTPTR_ov_domain this, const OV_INSTPTR_ov_domain that)		
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_PROCGECANONPATH(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	OV_RESULT* result,
	OV_UINT* items_length,
	OV_RESULT* items_results,
	OV_STRING** items_canonicalPaths
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_REQCREATEOBJ(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	const OV_UINT items_length,
	const OV_CREATEOBJ_ITEM* items_val,
	const OV_INSTPTR_ov_domain	callbackThat,
	void (*callback)(const OV_INSTPTR_ov_domain this, const OV_INSTPTR_ov_domain that)		
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_PROCCREATEOBJ(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	OV_RESULT* result,
	OV_UINT* items_length,
	OV_CREATEOBJECTITEM_RES** items_val
);


typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_REQDELOBJ(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	const OV_UINT items_length,
	const OV_STRING* paths,
	const OV_INSTPTR_ov_domain	callbackThat,
	void (*callback)(const OV_INSTPTR_ov_domain this, const OV_INSTPTR_ov_domain that)	
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_PROCDELOBJ(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	OV_RESULT* result,
	OV_UINT* items_length,
	OV_RESULT** items_results
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_REQRENAMEOBJ(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	const OV_UINT items_length,
	const OV_RENAMEOBJECT_ITEM* items_val,
	const OV_INSTPTR_ov_domain	callbackThat,
	void (*callback)(const OV_INSTPTR_ov_domain this, const OV_INSTPTR_ov_domain that)		
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_PROCRENAMEOBJ(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	OV_RESULT* result,
	OV_UINT* items_length,
	OV_RESULT** items_results
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_REQLINK(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	const OV_UINT items_length,
	const OV_LINK_ITEM* items_val,
	const OV_INSTPTR_ov_domain	callbackThat,
	void (*callback)(const OV_INSTPTR_ov_domain this, const OV_INSTPTR_ov_domain that)		
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_PROCLINK(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	OV_RESULT* result,
	OV_UINT* items_length,
	OV_RESULT** items_results
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_REQUNLINK(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	const OV_UINT items_length,
	const OV_UNLINK_ITEM* items_val,
	const OV_INSTPTR_ov_domain	callbackThat,
	void (*callback)(const OV_INSTPTR_ov_domain this, const OV_INSTPTR_ov_domain that)		
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_PROCUNLINK(
	const OV_INSTPTR_ksbase_ClientBase this,
	const OV_INSTPTR_ksbase_ClientTicketGenerator TicketGenerator,
	OV_RESULT* result,
	OV_UINT* items_length,
	OV_RESULT** items_results
);

#endif