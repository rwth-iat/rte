#ifndef TCPbind_OVT_INCLUDED
#define TCPbind_OVT_INCLUDED

#if !OV_SYSTEM_NT
#include <netdb.h>
#include <sys/socket.h>
#else
#undef _WIN32_WINNT
#define _WIN32_WINNT 0x501
#include <winsock2.h>
#include <ws2tcpip.h>
#endif

#if OV_SYSTEM_UNIX
#include <pthread.h>
#endif
/* 
	Define your data types here. 
*/


#if OV_SYSTEM_NT
 #define TCPBIND_INVALID_SOCKET INVALID_SOCKET
 #define TCPBIND_SOCKET_ERROR SOCKET_ERROR
 #define TCPBIND_SOCKET SOCKET
 #define TCPBIND_CLOSE_SOCKET closesocket
#else
 #define TCPBIND_INVALID_SOCKET (-1)
 #define TCPBIND_SOCKET_ERROR (-1)
 #define TCPBIND_SOCKET int
 #define TCPBIND_CLOSE_SOCKET close
#endif

typedef struct addrinfo *OV_addrinfoPointer;
typedef struct addrinfo OV_addrinfo;

#if OV_SYSTEM_NT
typedef HANDLE TCPB_THREADHANDLE;
#elif OV_SYSTEM_UNIX
typedef pthread_t TCPB_THREADHANDLE;
#else
typedef OV_INT TCPB_THREADHANDLE;	
#endif


enum getAddrInfoElemStatus {
	AIESTATUS_WAITING	=	0,
	AIESTATUS_WORKING,
	AIESTATUS_DONE,
	AIESTATUS_DELETESCHEDULED
};

enum getAddrInfoElemDelete {
	AIEDELETE_NO	=	0,
	AIEDELETE_DO
};

typedef struct getAddrInfoElem{
	TCPBIND_SOCKET socket;
#if OV_SYSTEM_NT
	LONG status;
	LONG delete;
#elif OV_SYSTEM_UNIX
	unsigned int status;
	unsigned int delete;
#endif
	OV_STRING host;
	OV_STRING port;
	int	result;
	struct addrinfo hints;
	struct addrinfo *addrInfo;
	struct getAddrInfoElem *pPrevious;
	struct getAddrInfoElem *pNext;
}getAddrInfoElem, *pGetAddrInfoElem;

typedef struct getAddrInfoElemList{
	struct getAddrInfoElem *pFirstElem;
	struct getAddrInfoElem *pLastElem;
}getAddrInfoElemList;

#endif