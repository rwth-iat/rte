#include "ov.ovm"
#include "fb.ovm"
#include "ksapi.ovm"


LIBRARY msgsys
	VERSION   = "V0.1 (DD-Mon-YYYY)";
	AUTHOR    = "";
	COPYRIGHT = "";
	COMMENT   = "";
	

	/**
		Add associations and their documentation here.
		Association syntax is:
	*/
	//ASSOCIATION assocName : ONE_TO_MANY
	//	PARENT parentVarName : CLASS ov/object;
	//	CHILD  childVarName : CLASS ov/object;
	//END_ASSOCIATION;
	
	
	
	//Inbox and/or Outbox. 
CLASS MessageBox : CLASS fb/functionblock
	COMMENT   = "Inbox and/or Outbox.";
	VARIABLES
		arrivalmethodptr	:	C_TYPE <OV_FNCPTR_MSGSYS_ARRIVAL_FNC>				FLAGS =	"n"
				COMMENT	=	"Pointer to the Arrivalmethod - called on arrived messages, if this is INBOX";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		arrivalMethod : C_FUNCTION <MSGSYS_ARRIVAL_FNC>; //calls arrivalMethodImpl, which needs to be provided by subclass
		retMethod : C_FUNCTION <MSGSYS_RET_FNC>;
		arrivalMethodImpl : C_FUNCTION <MSGSYS_ARRIVAL_FNC> IS_ABSTRACT;
	END_OPERATIONS;
END_CLASS;
	
CLASS Msg2StringMessageBox : CLASS msgsys/MessageBox
	IS_INSTANTIABLE;
	VARIABLES
	text : STRING HAS_ACCESSORS FLAGS = "o" COMMENT = "Text, welcher im MessageBody steht";	
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		arrivalMethodImpl : C_FUNCTION <MSGSYS_ARRIVAL_FNC>;
	END_OPERATIONS;
END_CLASS;
/***********************************************************************
	MSGSYS
***********************************************************************/
//This is THE ONE central component for retrieving (and sending) messages.
//Opposite: The FbSendMessage class is a pure sending instance 
CLASS MsgComponent : CLASS fb/functionblock
	IS_INSTANTIABLE;
	COMMENT   = "THE ONE central component for retrieving (and sending) messages.";
	VARIABLES
		retrieveMessage : STRING HAS_SET_ACCESSOR COMMENT="setVar wird von ksapi aufgerufen" INITIALVALUE="/TechUnits";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		startup				:	C_FUNCTION <OV_FNC_STARTUP>;
		retMethod : C_FUNCTION <KSAPI_FNC_RET>;
		sendMessage : C_FUNCTION <SENDMESSAGE_FNC>;
		registerService : C_FUNCTION <MSGSYS_REGISTER_FNC>;
		deregisterService : C_FUNCTION <MSGSYS_DEREGISTER_FNC>;
		findService : C_FUNCTION <MSGSYS_FINDSERVICE_FNC>;
	END_OPERATIONS;
END_CLASS;

//FbSendMessage as defined by Epple
//decentralized version of the MsgComponent.
//!!! this breaks the origin concept of the messagesys !!!  
CLASS FbSendMessage : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
	  doSend : BOOL HAS_ACCESSORS COMMENT="Aktivierungsmode des Blocks, Block schaltet sich nach jedem Senden aus.";
	  HOST : STRING HAS_ACCESSORS COMMENT="Host an die Nachtricht geschickt werden soll" INITIALVALUE="127.0.0.1";
	  SERVER : STRING HAS_ACCESSORS COMMENT="Server an die Nachtricht geschickt werden soll" INITIALVALUE="fb_receiver";
	  PATH : STRING HAS_ACCESSORS COMMENT="Objekt an das die Nachricht geschickt werden soll";
	  TYPE : INT HAS_ACCESSORS COMMENT="Art der Nachricht";
	  CONTENT : STRING HAS_ACCESSORS COMMENT="Inhalt der Nachricht";
	  
	  LTIM : TIME HAS_GET_ACCESSOR COMMENT="Zeitpunkt des Absendens der letzten Nachricht";
	  LHOST : STRING HAS_GET_ACCESSOR COMMENT="Host an den die letzte Nachtricht geschickt wurde";
	  LSERVER : STRING HAS_GET_ACCESSOR COMMENT="Server an den die letzte Nachtricht geschickt wurde";
	  LPATH : STRING HAS_GET_ACCESSOR COMMENT="Objekt an das die letzte Nachricht geschickt wurde";
	  LTYPE : INT HAS_GET_ACCESSOR COMMENT="Art der letzten Nachricht";
	  LCONTENT : STRING HAS_GET_ACCESSOR COMMENT="Inhalt der letzten Nachricht";
	  ID : INT HAS_GET_ACCESSOR COMMENT="Numer der letzten Nachricht (fortlaufend nummeriert)";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;


//An entry within the ServiceRegistry of the MsgSys
CLASS ServiceRegistryEntry : CLASS ov/domain
	IS_INSTANTIABLE;
	VARIABLES
		inboxPath : STRING HAS_ACCESSORS COMMENT = "Pfad zur Inbox";
		arrivalmethodptr	:	C_TYPE <OV_FNCPTR_MSGSYS_ARRIVAL_FNC>				FLAGS =	"n"
				COMMENT	=	"Pointer to the Service-Arrivalmethod";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
	END_OPERATIONS;
END_CLASS;

//The MsgSys Registry for services
CLASS ServiceRegistry : CLASS ov/domain
	IS_INSTANTIABLE;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
	END_OPERATIONS;
END_CLASS;




//Message - data handling object without "active" interaction
//Acting is handled within the MsgComponent 
CLASS Message : CLASS ov/object
	IS_INSTANTIABLE;
	VARIABLES
		senderAddress : STRING HAS_ACCESSORS COMMENT = "Adresse des Senders" INITIALVALUE="127.0.0.1";
		receiverAddress : STRING HAS_ACCESSORS COMMENT = "Adresse des Empfaengers" INITIALVALUE="127.0.0.1";
		senderName : STRING HAS_ACCESSORS COMMENT = "Servername des Senders" INITIALVALUE="fb_sender";
		receiverName : STRING HAS_ACCESSORS COMMENT = "Servername des Empfaengers" INITIALVALUE="fb_receiver";
		senderService : STRING HAS_ACCESSORS COMMENT = "Name des Sender-Service" INITIALVALUE="Sender";
		receiverService : STRING HAS_ACCESSORS COMMENT = "Name des Empfaenger-Service" INITIALVALUE="Receiver";
		msgStatus : INT HAS_ACCESSORS COMMENT="0=NEW, 1=WAITING, 2=DONE, 3=RECEIVERSERVICEERROR, 4=FATALERROR" INITIALVALUE=0 ;
		msgDataType : STRING HAS_ACCESSORS COMMENT = "Datentyp des Nachrichteninhalts" INITIALVALUE="STRING";
		msgID : UINT HAS_ACCESSORS INITIALVALUE=0;
		msgType : INT HAS_ACCESSORS COMMENT = "Nachrichtentyp" INITIALVALUE=0;
		msgBody : STRING HAS_ACCESSORS;
		msgSTRING : STRING HAS_ACCESSORS;
		sendString : STRING FLAGS =	"n";
		//this could be used by services to "subscripe" to a specific message for delivery. 
		//MsgComponent will call the pointer if message is sent 
		returnmethodptr	:	C_TYPE <OV_FNCPTR_MSGSYS_RET_FNC>	FLAGS =	"n"	COMMENT	=	"Pointer auf die returnMethod";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		serializeMessage : C_FUNCTION <SERIALIZEMESSAGE_FNC>;
		deserializeMessage : C_FUNCTION <DESERIALIZEMESSAGE_FNC>;
		getSenderAddress : C_FUNCTION <GETSENDERADDRESS_FNC>;
		getSenderName : C_FUNCTION <GETSENDERNAME_FNC>;
		getSenderService : C_FUNCTION <GETSENDERSERVICE_FNC>;
		getReceiverAddress : C_FUNCTION <GETRECEIVERADDRESS_FNC>;
		getReceiverName : C_FUNCTION <GETRECEIVERNAME_FNC>;
		getReceiverService : C_FUNCTION <GETRECEIVERSERVICE_FNC>;
		getMsgStatus : C_FUNCTION <GETMSGSTATUS_FNC>;
		getMsgID : C_FUNCTION <GETMSGID_FNC>;
		getMsgType : C_FUNCTION <GETMSGTYPE_FNC>;
		getMsgData : C_FUNCTION <GETMSGDATA_FNC>;
	END_OPERATIONS;
END_CLASS;


		
	
	//ASSOCIATION	FBComCommonAssoc			:	ONE_TO_ONE
	//	PARENT 	sendingFB 					:	CLASS fbcomlib/FBComCommon;
	//	CHILD	sendingObject				:	CLASS ksapi/KSCommon;
	//END_ASSOCIATION;
	

ASSOCIATION AssertionMsgSys2CurrentMessage : ONE_TO_ONE
  PARENT fromMsgSys : CLASS msgsys/MsgComponent;
  CHILD toCurrentMessage : CLASS msgsys/Message;
END_ASSOCIATION;

ASSOCIATION AssertionMsgSys2Message : ONE_TO_MANY
  PARENT fromMsgSys2 : CLASS msgsys/MsgComponent;
  CHILD toMessage : CLASS msgsys/Message;
END_ASSOCIATION;


	
END_LIBRARY;
	

