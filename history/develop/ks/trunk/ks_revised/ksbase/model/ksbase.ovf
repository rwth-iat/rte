#ifndef ksbase_OVF_INCLUDED
#define ksbase_OVF_INCLUDED

//is called by execute to determine if executime of Task is reached
typedef OV_DLLFNCEXPORT OV_BOOL KSBASE_FNC_CALCEXEC (
	OV_INSTPTR_ksbase_ComTask	this
);

//needs to be implemted by inherrited classes
typedef OV_DLLFNCEXPORT void KSBASE_FNC_TYPEMETHOD (
	OV_INSTPTR_ksbase_ComTask	this
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_REGISTER (
	OV_STRING name, 
	OV_INT version,
	OV_STRING protocol,
	OV_STRING port,
	OV_UINT timetolive
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_UNREGISTER (
	OV_STRING name, 
	OV_INT version,
	OV_STRING protocol
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_GETSERVERDATA (
	OV_STRING name, 
	OV_INT version,
	OV_STRING_VEC* protocols,
	OV_STRING_VEC* ports,
	OV_UINT* TimeToLive,
	OV_TIME* ExpirationTime,
	OV_INT*  registeredVersion
);

typedef OV_DLLFNCEXPORT OV_BOOL KSBASE_FNC_IDENTIFY (
	OV_INSTPTR_ksbase_ProtocolIdentificator this,
	OV_INSTPTR_ksbase_Channel pchannel
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_CREATECH (
	OV_INSTPTR_ksbase_ProtocolIdentificator this,
	OV_INSTPTR_ksbase_Channel pchannel
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_SENDDATA(
	OV_INSTPTR_ksbase_Channel this
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_HANDLEREQUEST(
	OV_INSTPTR_ksbase_ClientHandler this,
	KS_DATAPACKET* dataReceived,
	KS_DATAPACKET* answer
);

typedef OV_DLLFNCEXPORT OV_RESULT KSBASE_FNC_HANDLEDATA(
	OV_INSTPTR_ksbase_DataHandler this,
	KS_DATAPACKET* dataReceived,
	KS_DATAPACKET* answer
);

typedef OV_DLLFNCEXPORT OV_TICKET* KSBASE_FNC_CREATETICKET(
	void *data,
	OV_TICKET_TYPE type
);

typedef OV_DLLFNCEXPORT void KSBASE_FNC_DELETETICKET(
	OV_TICKET *pticket
);

typedef OV_DLLFNCEXPORT OV_BOOL KSBASE_FNC_ENCODEREPLY(
	void *data, 
	OV_TICKET *pticket
);


typedef OV_DLLFNCEXPORT OV_ACCESS KSBASE_FNC_GETACCESS(
	const OV_TICKET *pticket
);

#endif