/*
*   $Id: ov_ksserver_xdr.h,v 1.1 1999-07-19 15:02:05 dirk Exp $
*
*   Copyright (C) 1998-1999
*   Lehrstuhl fuer Prozessleittechnik,
*   RWTH Aachen, D-52056 Aachen, Germany.
*   All rights reserved.
*
*   Author: Dirk Meyer <dirk@plt.rwth-aachen.de>
*
*   This file is part of the ACPLT/OV Package which is licensed as open
*   source under the Artistic License; you can use, redistribute and/or
*   modify it under the terms of that license.
*
*   You should have received a copy of the Artistic License along with
*   this Package; see the file ARTISTIC-LICENSE. If not, write to the
*   Copyright Holder.
*
*   THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
*   WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES
*   OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
*/
/*
*	History:
*	--------
*	20-Apr-1999 Dirk Meyer <dirk@plt.rwth-aachen.de>: File created.
*/
/*
*	Description:
*	------------
*	These XDR routines are mostly based on the output of the RPC code
*	generator rpcgen. They are designed for the use with the ACPLT/KS server
*	of ACPLT/OV only and optimized for speed, i.e. they are use the memory
*	allocator ov_memstack_alloc() only.
*	This means, that ov_memstack_lock() and ov_memstack_unlock() have to
*	be called outside the XDR routines and that the XDR mode XDR_FREE is not
*	available.
*	If you introduce changes here, you should probably take a look at
*	ov_ksclient_xdr.h too.
*/

#ifndef OV_KSSERVER_XDR_H_INCLUDED
#define OV_KSSERVER_XDR_H_INCLUDED

#include "libov/ov_ov.h"

#ifdef __cplusplus
extern "C" {
#endif

/*
*	Are you wondering what this mess is all about? Well, there's at least
*	on compiler (can you find out which one?) which likes to save memory
*	or something and therefore truncates global symbols after the 31st
*	character...
*	The good news is that we can overcome this with these defines.
*	The bad news is that you have to care about symbols automatically
*	generated by the ACPLT/OV code generator. If you like to compile your
*	stuff on OpenVMS, you better choose short names for your libraries,
*	classes, variables, operations and links!
*/
#if OV_SYSTEM_OPENVMS
#define ov_ksserver_xdr_OV_CREATEOBJECT_PAR			ov_kssvr_xdr_OV_CROB_PAR
#define ov_ksserver_xdr_OV_CREATEOBJECT_RES			ov_kssvr_xdr_OV_CROB_RES
#define ov_ksserver_xdr_OV_CREATEOBJECTITEM_RES		ov_kssvr_xdr_OV_CROBIT_RES
#define ov_ksserver_xdr_OV_DELETEOBJECT_PAR			ov_kssvr_xdr_OV_DLOB_PAR
#define ov_ksserver_xdr_OV_DELETEOBJECT_RES			ov_kssvr_xdr_OV_DLOB_RES
#define ov_ksserver_xdr_OV_RENAMEOBJECT_PAR			ov_kssvr_xdr_OV_REOB_PAR
#define ov_ksserver_xdr_OV_RENAMEOBJECT_RES			ov_kssvr_xdr_OV_REOB_RES
#define ov_ksserver_xdr_OV_RENAMEOBJECTITEM_RES		ov_kssvr_xdr_OV_REOBIT_RES
#define ov_ksserver_xdr_OV_GETCANONICALPATH_PAR		ov_kssvr_xdr_OV_GCP_PAR
#define ov_ksserver_xdr_OV_GETCANONICALPATH_RES		ov_kssvr_xdr_OV_GCP_RES
#define ov_ksserver_xdr_OV_GETCANONICALPATHITEM_RES	ov_kssvr_xdr_OV_GCPIT_RES
#endif

/*
*	shared datatypes ACPLT/KS -- ACPLT/OV
*/
typedef KS_LINK_TYPE		OV_LINK_TYPE;
typedef KS_OBJ_TYPE			OV_OBJ_TYPE;
typedef KS_SVC				OV_SVC;
typedef KS_SEMANTIC_FLAGS	OV_SEMANTIC_FLAGS;
typedef KS_EP_FLAGS			OV_EP_FLAGS;

/*
*	OV_VAR_PROJECTED_PROPS:
*	-----------------------
*	Projected properites of a variable.
*/
typedef struct {
	OV_STRING	tech_unit;
	OV_VAR_TYPE vartype;
}	OV_VAR_PROJECTED_PROPS;

/*
*	OV_LINK_PROJECTED_PROPS:
*	------------------------
*	Projected properites of a link.
*/
typedef struct {
	OV_LINK_TYPE	linktype;
	OV_STRING		opposite_role_identifier;
	OV_STRING		association_identifier;
}	OV_LINK_PROJECTED_PROPS;

/*
*	OV_OBJ_PROJECTED_PROPS:
*	-----------------------
*	Projected properties of an communication object.
*	Note, that in GetPP they are be linked to a list, NOT an array.
*/
struct OV_OBJ_PROJECTED_PROPS {
	struct OV_OBJ_PROJECTED_PROPS	*pnext;
	OV_OBJ_TYPE	objtype;
	union {
		OV_VAR_PROJECTED_PROPS	var_projected_props;
		OV_LINK_PROJECTED_PROPS	link_projected_props;
	}	OV_OBJ_PROJECTED_PROPS_u;
	OV_STRING	identifier;
	OV_TIME		creation_time;
	OV_STRING	comment;
	OV_ACCESS	access;
};
typedef struct OV_OBJ_PROJECTED_PROPS	OV_OBJ_PROJECTED_PROPS;

/*
*	OV_GETPP_PAR:
*	-------------
*	Parameters of a GetPP service.
*/
typedef struct {
	OV_STRING	path;
	OV_OBJ_TYPE type_mask;
	OV_STRING	name_mask;
}	OV_GETPP_PAR;

/*
*	OV_GETPP_RES:
*	-------------
*	Result of a GetPP service.
*/
typedef struct {
	OV_RESULT				result;
	OV_UINT					items_len;	/* only, if result == OV_ERR_OK */
	OV_OBJ_PROJECTED_PROPS	*pfirst;	/* only, if result == OV_ERR_OK */
	OV_OBJ_PROJECTED_PROPS	*plast;		/* only, if result == OV_ERR_OK */
}	OV_GETPP_RES;

/*
*	OV_GETVAR_ITEM:
*	---------------
*	Item of the GetVar/DataExchange service result.
*/
typedef struct {
	OV_RESULT				result;
	OV_VAR_CURRENT_PROPS	var_current_props;	/* only, if result == OV_ERR_OK */
}	OV_GETVAR_ITEM;

/*
*	OV_GETVAR_PAR:
*	--------------
*	Parameters of a GetVar service.
*/
typedef struct {
	OV_UINT		identifiers_len;
	OV_STRING	*identifiers_val;
}	OV_GETVAR_PAR;

/*
*	OV_GETVAR_RES:
*	--------------
*	Result of a GetVar service.
*/
typedef struct {
	OV_RESULT		result;
	OV_UINT			items_len;			/* only, if result == OV_ERR_OK */
	OV_GETVAR_ITEM	*items_val;			/* only, if result == OV_ERR_OK */
}	OV_GETVAR_RES;

/*
*	OV_SETVAR_ITEM:
*	---------------
*	Item of the SetVar/DataExchange service parameters.
*/
typedef struct {
	OV_STRING				path_and_name;
	OV_VAR_CURRENT_PROPS	var_current_props;
}	OV_SETVAR_ITEM;

/*
*	OV_SETVAR_PAR:
*	--------------
*	Parameters of a SetVar service.
*/
typedef struct {
	OV_UINT			items_len;
	OV_SETVAR_ITEM	*items_val;
}	OV_SETVAR_PAR;

/*
*	OV_SETVAR_RES:
*	--------------
*	Result of a SetVar service.
*/
typedef struct {
	OV_RESULT	result;
	OV_UINT		results_len;					/* only, if result == OV_ERR_OK */
	OV_RESULT	*results_val;					/* only, if result == OV_ERR_OK */
}	OV_SETVAR_RES;

/*
*	OV_EXGDATA_PAR:
*	---------------
*	Parameters of a DataExchange service.
*/
typedef struct {
	OV_UINT			set_vars_len;
	OV_SETVAR_ITEM	*set_vars_val;
	OV_UINT			get_vars_len;
	OV_STRING		*get_vars_val;
}	OV_EXGDATA_PAR;

/*
*	OV_EXGDATA_RES:
*	---------------
*	Result of DataExchange service.
*/
typedef struct {
	OV_RESULT 		result;
	OV_UINT			results_len;		/* only, if result == OV_ERR_OK */
	OV_RESULT		*results_val		/* only, if result == OV_ERR_OK */;
	OV_UINT			items_len;			/* only, if result == OV_ERR_OK */
	OV_GETVAR_ITEM	*items_val;			/* only, if result == OV_ERR_OK */
}	OV_EXGDATA_RES;

/*
*	OV_DOMAIN_ENGINEERED_PROPS:
*	--------------------------
*	Engineered properites of a domain.
*/
typedef struct {
	OV_STRING	class_identifier;
}	OV_DOMAIN_ENGINEERED_PROPS;

/*
*	OV_VAR_ENGINEERED_PROPS:
*	-----------------------
*	Engineered properites of a variable.
*/
typedef struct {
	OV_STRING	tech_unit;
	OV_VAR_TYPE vartype;
}	OV_VAR_ENGINEERED_PROPS;

/*
*	OV_LINK_ENGINEERED_PROPS:
*	------------------------
*	Engineered properites of a link.
*/
typedef struct {
	OV_LINK_TYPE	linktype;
	OV_STRING		opposite_role_identifier;
	OV_STRING		association_identifier;
}	OV_LINK_ENGINEERED_PROPS;

/*
*	OV_OBJ_ENGINEERED_PROPS:
*	-----------------------
*	Engineered properties of an communication object.
*	Note, that in GetEP they are be linked to a list, NOT an array.
*/
struct OV_OBJ_ENGINEERED_PROPS {
	struct OV_OBJ_ENGINEERED_PROPS	*pnext;
	OV_OBJ_TYPE	objtype;
	union {
		OV_DOMAIN_ENGINEERED_PROPS	domain_engineered_props;
		OV_VAR_ENGINEERED_PROPS		var_engineered_props;
		OV_LINK_ENGINEERED_PROPS	link_engineered_props;
	}	OV_OBJ_ENGINEERED_PROPS_u;
	OV_STRING			identifier;
	OV_TIME				creation_time;
	OV_STRING			comment;
	OV_ACCESS			access;
	OV_SEMANTIC_FLAGS	semantic_flags;
};
typedef struct OV_OBJ_ENGINEERED_PROPS	OV_OBJ_ENGINEERED_PROPS;

/*
*	OV_GETEP_PAR:
*	-------------
*	Parameters of a GetEP service.
*/
typedef struct {
	OV_STRING	path;
	OV_OBJ_TYPE type_mask;
	OV_STRING	name_mask;
	OV_EP_FLAGS	scope_flags;
}	OV_GETEP_PAR;

/*
*	OV_GETEP_RES:
*	-------------
*	Result of a GetEP service.
*/
typedef struct {
	OV_RESULT				result;
	OV_UINT					items_len;	/* only, if result == OV_ERR_OK */
	OV_OBJ_ENGINEERED_PROPS	*pfirst;	/* only, if result == OV_ERR_OK */
	OV_OBJ_ENGINEERED_PROPS	*plast;		/* only, if result == OV_ERR_OK */
}	OV_GETEP_RES;

/*
*	OV_PLACEMENT:
*	-------------
*	Placement of a Link/CreateObject service.
*/
typedef struct {
	OV_PLACEMENT_HINT	hint;
	OV_STRING			place_path;				/* only, if hint == OV_PMH_BEFORE/AFTER */
}	OV_PLACEMENT;

/*
*	OV_LINK_ITEM:
*	-------------
*	Item of the Link/CreateObject service parameters.
*/
typedef struct {
	OV_STRING		link_path;
	OV_STRING		element_path;
	OV_PLACEMENT	place;
	OV_PLACEMENT	opposite_place;
}	OV_LINK_ITEM;

/*
*	OV_UNLINK_ITEM:
*	---------------
*	Item of the Link service parameters.
*/
typedef struct {
	OV_STRING	link_path;
	OV_STRING	element_path;
}	OV_UNLINK_ITEM;

/*
*	OV_CREATEOBJ_ITEM:
*	------------------
*	Item of the CreateObject service parameters.
*/
typedef struct {
	OV_STRING		factory_path;
	OV_STRING		new_path;
	OV_PLACEMENT	place;
	OV_UINT			parameters_len;
	OV_SETVAR_ITEM	*parameters_val;
	OV_UINT			links_len;
	OV_LINK_ITEM	*links_val;
}	OV_CREATEOBJ_ITEM;

/*
*	OV_CREATEOBJECT_PAR:
*	--------------------
*	Parameters of the CreateObject service.
*/
typedef struct {
	OV_UINT				items_len;
	OV_CREATEOBJ_ITEM	*items_val;
}	OV_CREATEOBJECT_PAR;

/*
*	OV_CREATEOBJECTITEM_RES:
*	------------------------
*	Result item of a CreateObject service result.
*/
typedef struct {
	OV_RESULT	result;
	OV_UINT		params_results_len;				/* only, if result == OV_ERR_BADINITPARAM */
	OV_RESULT	*params_results_val;			/* only, if result == OV_ERR_BADINITPARAM */
	OV_UINT		link_results_len;				/* only, if result == OV_ERR_BADINITPARAM */
	OV_RESULT	*link_results_val;				/* only, if result == OV_ERR_BADINITPARAM */
}	OV_CREATEOBJECTITEM_RES;

/*
*	OV_CREATEOBJECT_RES:
*	--------------------
*	Result of a CreateObject service.
*/
typedef struct {
	OV_RESULT				result;
	OV_UINT					obj_results_len;	/* only, if result == OV_ERR_OK */
	OV_CREATEOBJECTITEM_RES	*obj_results_val;	/* only, if result == OV_ERR_OK */
}	OV_CREATEOBJECT_RES;

/*
*	OV_DELETEOBJECT_PAR:
*	--------------------
*	Parameters of a DeleteObject service.
*/
typedef struct {
	OV_UINT		paths_len;
	OV_STRING	*paths_val;
}	OV_DELETEOBJECT_PAR;

/*
*	OV_DELETEOBJECT_RES:
*	--------------------
*	Result of a DeleteObject service.
*/
typedef struct {
	OV_RESULT	result;
	OV_UINT		results_len;				/* only, if result == OV_ERR_OK */
	OV_RESULT	*results_val;				/* only, if result == OV_ERR_OK */
}	OV_DELETEOBJECT_RES;

/*
*	OV_RENAMEOBJECT_ITEM:
*	---------------------
*	Item of the RenameObject service parameters.
*/
typedef struct {
	OV_STRING		old_path;
	OV_STRING		new_path;
	OV_PLACEMENT	place;
}	OV_RENAMEOBJECT_ITEM;

/*
*	OV_RENAMEOBJECT_PAR:
*	--------------------
*	Parameters of a RenameObject Service
*/
typedef struct {
	OV_UINT					items_len;
	OV_RENAMEOBJECT_ITEM	*items_val;
}	OV_RENAMEOBJECT_PAR;

/*
*	OV_RENAMEOBJECT_RES:
*	--------------------
*	Result of a RenameObject Service
*/
typedef struct {
	OV_RESULT	result;
	OV_UINT		results_len;				/* only, if result == OV_ERR_OK */
	OV_RESULT	*results_val;				/* only, if result == OV_ERR_OK */
}	OV_RENAMEOBJECT_RES;

/*
*	OV_GETCANONICALPATH_PAR:
*	------------------------
*	Parameters of a GetCanonicalPath Service
*/
typedef struct {
	OV_UINT		paths_len;
	OV_STRING	*paths_val;
}	OV_GETCANONICALPATH_PAR;

/*
*	OV_GETCANONICALPATHITEM_RES:
*	----------------------------
*	Result item of a GetCanonicalPath Service
*/
typedef struct {
	OV_RESULT	result;
	OV_STRING	canonical_path;				/* only, if result == OV_ERR_OK */
}	OV_GETCANONICALPATHITEM_RES;


/*
*	OV_GETCANONICALPATH_RES:
*	------------------------
*	Result of a GetCanonicalPath Service
*/
typedef struct {
	OV_RESULT					result;
	OV_UINT						results_len;	/* only, if result == OV_ERR_OK */
	OV_GETCANONICALPATHITEM_RES	*results_val;	/* only, if result == OV_ERR_OK */
}	OV_GETCANONICALPATH_RES;

/*
*	OV_LINK_PAR:
*	------------
*	Parameters of a Link service.
*/
typedef struct {
	OV_UINT			items_len;
	OV_LINK_ITEM	*items_val;
}	OV_LINK_PAR;

/*
*	OV_LINK_RES:
*	------------
*	Result of a Link service.
*/
typedef struct {
	OV_RESULT	result;
	OV_UINT		results_len;					/* only, if result == OV_ERR_OK */
	OV_RESULT	*results_val;					/* only, if result == OV_ERR_OK */
}	OV_LINK_RES;

/*
*	OV_UNLINK_PAR:
*	--------------
*	Parameters of an Unlink service.
*/
typedef struct {
	OV_UINT			items_len;
	OV_UNLINK_ITEM	*items_val;
}	OV_UNLINK_PAR;

/*
*	OV_UNLINK_RES:
*	--------------
*	Result of an Unlink service.
*/
typedef struct {
	OV_RESULT	result;
	OV_UINT		results_len;					/* only, if result == OV_ERR_OK */
	OV_RESULT	*results_val;					/* only, if result == OV_ERR_OK */
}	OV_UNLINK_RES;

/*
*	The following part is only visible inside the library
*	-----------------------------------------------------
*/
#ifdef OV_COMPILE_LIBOVKS

/*
*	XDR routine for bytes
*/
OV_BOOL ov_ksserver_xdr_bytes(
	XDR		*xdrs,
	char	**cpp,
	OV_UINT	*sizep,
	OV_UINT	maxsize
);

/*
*	XDR routine for strings
*/
OV_BOOL ov_ksserver_xdr_string(
	XDR			*xdrs,
	char		**cpp,
	OV_UINT		maxsize
);

/*
*	XDR routine for arrays
*/
OV_BOOL ov_ksserver_xdr_array(
	XDR			*xdrs,
	char		**addrp,
	OV_UINT		*sizep,
	OV_UINT		maxsize,
	OV_UINT		elsize,
	xdrproc_t	elproc
);

/*
*	XDR routine for OV_ENUM
*/
#define ov_ksserver_xdr_OV_ENUM	xdr_enum

/*
*	XDR routine for OV_BOOL
*/
#define ov_ksserver_xdr_OV_BOOL	xdr_bool

/*
*	XDR routine for OV_INT
*/
#define ov_ksserver_xdr_OV_INT	xdr_long

/*
*	XDR routine for OV_UINT
*/
#define ov_ksserver_xdr_OV_UINT	xdr_u_long

/*
*	XDR routine for OV_SINGLE
*/
#define ov_ksserver_xdr_OV_SINGLE	xdr_float

/*
*	XDR routine for OV_DOUBLE
*/
#define ov_ksserver_xdr_OV_DOUBLE	xdr_double

/*
*	XDR routine for OV_TIME
*/
OV_BOOL ov_ksserver_xdr_OV_TIME(
	XDR		*xdrs,
	OV_TIME	*objp
);

/*
*	XDR routine for OV_TIME_SPAN
*/
OV_BOOL ov_ksserver_xdr_OV_TIME_SPAN(
	XDR				*xdrs,
	OV_TIME_SPAN	*objp
);

/*
*	XDR routine for OV_STRING
*/
OV_BOOL ov_ksserver_xdr_OV_STRING(
	XDR			*xdrs,
	OV_STRING	*objp
);

/*
*	XDR routine for OV_RESULT
*/
#define ov_ksserver_xdr_OV_RESULT	ov_ksserver_xdr_OV_ENUM

/*
*	XDR routine for OV_TICKET_TYPE
*/
#define ov_ksserver_xdr_OV_TICKET_TYPE	ov_ksserver_xdr_OV_ENUM

/*
*	XDR routine for OV_VAR_TYPE
*/
#define ov_ksserver_xdr_OV_VAR_TYPE	ov_ksserver_xdr_OV_ENUM

/*
*	XDR routine for OV_STATE
*/
#define ov_ksserver_xdr_OV_STATE	ov_ksserver_xdr_OV_ENUM

/*
*	XDR routine for OV_OBJ_TYPE
*/
#define ov_ksserver_xdr_OV_OBJ_TYPE	ov_ksserver_xdr_OV_ENUM

/*
*	XDR routine for OV_ACCESS
*/
#define ov_ksserver_xdr_OV_ACCESS	ov_ksserver_xdr_OV_ENUM

/*
*	XDR routine for OV_LINK_TYPE
*/
#define ov_ksserver_xdr_OV_LINK_TYPE	ov_ksserver_xdr_OV_ENUM

/*
*	XDR routine for OV_PLACEMENT_HINT
*/
#define ov_ksserver_xdr_OV_PLACEMENT_HINT	ov_ksserver_xdr_OV_ENUM

/*
*	XDR routine for OV_SEMANTIC_FLAGS
*/
#define ov_ksserver_xdr_OV_SEMANTIC_FLAGS	xdr_u_long

/*
*	XDR routine for OV_EP_FLAGS
*/
#define ov_ksserver_xdr_OV_EP_FLAGS	ov_ksserver_xdr_OV_ENUM

/*
*	XDR routine for OV_TICKET_PAR
*/
OV_BOOL ov_ksserver_xdr_OV_TICKET_PAR(
	XDR			*xdrs,
	OV_TICKET	*objp
);

/*
*	XDR routine for OV_TICKET_RES
*/
OV_BOOL ov_ksserver_xdr_OV_TICKET_RES(
	XDR			*xdrs,
	OV_TICKET	*objp
);

/*
*	XDR routine for OV_VAR_VALUE
*/
OV_BOOL ov_ksserver_xdr_OV_VAR_VALUE(
	XDR				*xdrs,
	OV_VAR_VALUE	*objp
);

/*
*	XDR routine for OV_VAR_PROJECTED_PROPS
*/
OV_BOOL ov_ksserver_xdr_OV_VAR_PROJECTED_PROPS(
	XDR						*xdrs,
	OV_VAR_PROJECTED_PROPS	*objp
);

/*
*	XDR routine for OV_VAR_CURRENT_PROPS
*/
OV_BOOL ov_ksserver_xdr_OV_VAR_CURRENT_PROPS(
	XDR						*xdrs,
	OV_VAR_CURRENT_PROPS	*objp
);

/*
*	XDR routine for OV_LINK_PROJECTED_PROPS
*/
OV_BOOL ov_ksserver_xdr_OV_LINK_PROJECTED_PROPS(
	XDR						*xdrs,
	OV_LINK_PROJECTED_PROPS	*objp
);

/*
*	XDR routine for OV_OBJ_PROJECTED_PROPS
*/
OV_BOOL ov_ksserver_xdr_OV_OBJ_PROJECTED_PROPS(
	XDR						*xdrs,
	OV_OBJ_PROJECTED_PROPS	*objp
);

/*
*	XDR routine for OV_GETPP_PAR
*/
OV_BOOL ov_ksserver_xdr_OV_GETPP_PAR(
	XDR				*xdrs,
	OV_GETPP_PAR	*objp
);

/*
*	XDR routine for OV_GETPP_RES
*/
OV_BOOL ov_ksserver_xdr_OV_GETPP_RES(
	XDR				*xdrs,
	OV_GETPP_RES	*objp
);

/*
*	XDR routine for OV_GETVAR_ITEM
*/
OV_BOOL ov_ksserver_xdr_OV_GETVAR_ITEM(
	XDR				*xdrs,
	OV_GETVAR_ITEM	*objp
);

/*
*	XDR routine for OV_GETVAR_PAR
*/
OV_BOOL ov_ksserver_xdr_OV_GETVAR_PAR(
	XDR				*xdrs,
	OV_GETVAR_PAR	*objp
);

/*
*	XDR routine for OV_GETVAR_RES
*/
OV_BOOL ov_ksserver_xdr_OV_GETVAR_RES(
	XDR				*xdrs,
	OV_GETVAR_RES	*objp
);

/*
*	XDR routine for OV_SETVAR_ITEM
*/
OV_BOOL ov_ksserver_xdr_OV_SETVAR_ITEM(
	XDR				*xdrs,
	OV_SETVAR_ITEM	*objp
);

/*
*	XDR routine for OV_SETVAR_PAR
*/
OV_BOOL ov_ksserver_xdr_OV_SETVAR_PAR(
	XDR				*xdrs,
	OV_SETVAR_PAR	*objp
);

/*
*	XDR routine for OV_SETVAR_RES
*/
OV_BOOL ov_ksserver_xdr_OV_SETVAR_RES(
	XDR				*xdrs,
	OV_SETVAR_RES	*objp
);

/*
*	XDR routine for OV_EXGDATA_PAR
*/
OV_BOOL ov_ksserver_xdr_OV_EXGDATA_PAR(
	XDR				*xdrs,
	OV_EXGDATA_PAR	*objp
);

/*
*	XDR routine for OV_EXGDATA_RES
*/
OV_BOOL ov_ksserver_xdr_OV_EXGDATA_RES(
	XDR				*xdrs,
	OV_EXGDATA_RES	*objp
);

/*
*	XDR routine for OV_DOMAIN_ENGINEERED_PROPS
*/
OV_BOOL ov_ksserver_xdr_OV_DOMAIN_ENGINEERED_PROPS(
	XDR							*xdrs,
	OV_DOMAIN_ENGINEERED_PROPS	*objp
);

/*
*	XDR routine for OV_VAR_ENGINEERED_PROPS
*/
OV_BOOL ov_ksserver_xdr_OV_VAR_ENGINEERED_PROPS(
	XDR						*xdrs,
	OV_VAR_ENGINEERED_PROPS	*objp
);

/*
*	XDR routine for OV_LINK_ENGINEERED_PROPS
*/
OV_BOOL ov_ksserver_xdr_OV_LINK_ENGINEERED_PROPS(
	XDR							*xdrs,
	OV_LINK_ENGINEERED_PROPS	*objp
);

/*
*	XDR routine for OV_OBJ_ENGINEERED_PROPS
*/
OV_BOOL ov_ksserver_xdr_OV_OBJ_ENGINEERED_PROPS(
	XDR						*xdrs,
	OV_OBJ_ENGINEERED_PROPS	*objp
);

/*
*	XDR routine for OV_GETEP_PAR
*/
OV_BOOL ov_ksserver_xdr_OV_GETEP_PAR(
	XDR				*xdrs,
	OV_GETEP_PAR	*objp
);

/*
*	XDR routine for OV_GETEP_RES
*/
OV_BOOL ov_ksserver_xdr_OV_GETEP_RES(
	XDR				*xdrs,
	OV_GETEP_RES	*objp
);

/*
*	XDR routine for OV_PLACEMENT
*/
OV_BOOL ov_ksserver_xdr_OV_PLACEMENT(
	XDR				*xdrs,
	OV_PLACEMENT	*objp
);

/*
*	XDR routine for OV_LINK_ITEM
*/
OV_BOOL ov_ksserver_xdr_OV_LINK_ITEM(
	XDR				*xdrs,
	OV_LINK_ITEM	*objp
);

/*
*	XDR routine for OV_UNLINK_ITEM
*/
OV_BOOL ov_ksserver_xdr_OV_UNLINK_ITEM(
	XDR				*xdrs,
	OV_UNLINK_ITEM	*objp
);

/*
*	XDR routine for OV_CREATEOBJ_ITEM
*/
OV_BOOL ov_ksserver_xdr_OV_CREATEOBJ_ITEM(
	XDR					*xdrs,
	OV_CREATEOBJ_ITEM	*objp
);

/*
*	XDR routine for OV_OV_CREATEOBJECT_PAR
*/
OV_BOOL ov_ksserver_xdr_OV_CREATEOBJECT_PAR(
	XDR					*xdrs,
	OV_CREATEOBJECT_PAR	*objp
);

/*
*	XDR routine for OV_CREATEOBJECTITEM_RES
*/
OV_BOOL ov_ksserver_xdr_OV_CREATEOBJECTITEM_RES(
	XDR						*xdrs,
	OV_CREATEOBJECTITEM_RES	*objp
);

/*
*	XDR routine for OV_CREATEOBJECT_RES
*/
OV_BOOL ov_ksserver_xdr_OV_CREATEOBJECT_RES(
	XDR					*xdrs,
	OV_CREATEOBJECT_RES	*objp
);

/*
*	XDR routine for OV_DELETEOBJECT_PAR
*/
OV_BOOL ov_ksserver_xdr_OV_DELETEOBJECT_PAR(
	XDR					*xdrs,
	OV_DELETEOBJECT_PAR	*objp
);

/*
*	XDR routine for OV_DELETEOBJECT_RES
*/
OV_BOOL ov_ksserver_xdr_OV_DELETEOBJECT_RES(
	XDR					*xdrs,
	OV_DELETEOBJECT_RES	*objp
);

/*
*	XDR routine for OV_RENAMEOBJECT_ITEM
*/
OV_BOOL ov_ksserver_xdr_OV_RENAMEOBJECT_ITEM(
	XDR						*xdrs,
	OV_RENAMEOBJECT_ITEM	*objp
);

/*
*	XDR routine for OV_RENAMEOBJECT_PAR
*/
OV_BOOL ov_ksserver_xdr_OV_RENAMEOBJECT_PAR(
	XDR					*xdrs,
	OV_RENAMEOBJECT_PAR	*objp
);

/*
*	XDR routine for OV_RENAMEOBJECT_RES
*/
OV_BOOL ov_ksserver_xdr_OV_RENAMEOBJECT_RES(
	XDR					*xdrs,
	OV_RENAMEOBJECT_RES	*objp
);

/*
*	XDR routine for OV_GETCANONICALPATH_PAR
*/
OV_BOOL ov_ksserver_xdr_OV_GETCANONICALPATH_PAR(
	XDR						*xdrs,
	OV_GETCANONICALPATH_PAR	*objp
);

/*
*	XDR routine for OV_GETCANONICALPATHITEM_RES
*/
OV_BOOL ov_ksserver_xdr_OV_GETCANONICALPATHITEM_RES(
	XDR							*xdrs,
	OV_GETCANONICALPATHITEM_RES	*objp
);

/*
*	XDR routine for OV_GETCANONICALPATH_RES
*/
OV_BOOL ov_ksserver_xdr_OV_GETCANONICALPATH_RES(
	XDR						*xdrs,
	OV_GETCANONICALPATH_RES	*objp
);

/*
*	XDR routine for OV_LINK_PAR
*/
OV_BOOL ov_ksserver_xdr_OV_LINK_PAR(
	XDR			*xdrs,
	OV_LINK_PAR	*objp
);

/*
*	XDR routine for OV_LINK_RES
*/
OV_BOOL ov_ksserver_xdr_OV_LINK_RES(
	XDR			*xdrs,
	OV_LINK_RES	*objp
);

/*
*	XDR routine for OV_UNLINK_PAR
*/
OV_BOOL ov_ksserver_xdr_OV_UNLINK_PAR(
	XDR				*xdrs,
	OV_UNLINK_PAR	*objp
);

/*
*	XDR routine for OV_UNLINK_RES
*/
OV_BOOL ov_ksserver_xdr_OV_UNLINK_RES(
	XDR				*xdrs,
	OV_UNLINK_RES	*objp
);

#endif	/* OV_COMPILE_LIBOVKS */

#ifdef __cplusplus
}	/* extern "C" */
#endif

#endif
/*
*	End of file
*/

