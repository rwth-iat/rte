/*
*   $Id: ov_ksclient_xdr.h,v 1.1 1999-07-19 15:02:05 dirk Exp $
*
*   Copyright (C) 1998-1999
*   Lehrstuhl fuer Prozessleittechnik,
*   RWTH Aachen, D-52056 Aachen, Germany.
*   All rights reserved.
*
*   Author: Dirk Meyer <dirk@plt.rwth-aachen.de>
*
*   This file is part of the ACPLT/OV Package which is licensed as open
*   source under the Artistic License; you can use, redistribute and/or
*   modify it under the terms of that license.
*
*   You should have received a copy of the Artistic License along with
*   this Package; see the file ARTISTIC-LICENSE. If not, write to the
*   Copyright Holder.
*
*   THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
*   WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES
*   OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
*/
/*
*	History:
*	--------
*	03-May-1999 Dirk Meyer <dirk@plt.rwth-aachen.de>: File created.
*/
/*
*	Description:
*	------------
*	These XDR routines are mostly based on the output of the RPC code
*	generator rpcgen. In contrast to the routines declared in the file
*	ov_ksserver_xdr.h, these routines work with the heap memory.
*
*	If you introduce changes here, you should probably take a look at
*	ov_ksserver_xdr.h too.
*/

#ifndef OV_KSCLIENT_XDR_H_INCLUDED
#define OV_KSCLIENT_XDR_H_INCLUDED

#include "libovks/ov_ksserver_xdr.h"

#ifdef __cplusplus
extern "C" {
#endif

/*
*	Are you wondering what this mess is all about? Well, there's at least
*	on compiler (can you find out which one?) which likes to save memory
*	or something and therefore truncates global symbols after the 31st
*	character...
*	The good news is that we can overcome this with these defines.
*	The bad news is that you have to care about symbols automatically
*	generated by the ACPLT/OV code generator. If you like to compile your
*	stuff on OpenVMS, you better choose short names for your libraries,
*	classes, variables, operations and links!
*/
#if OV_SYSTEM_OPENVMS
#define ov_ksclient_xdr_KS_CREATEOBJECT_PAR			ov_kscln_xdr_KS_CROB_PAR
#define ov_ksclient_xdr_KS_CREATEOBJECT_RES			ov_kscln_xdr_KS_CROB_RES
#define ov_ksclient_xdr_KS_CREATEOBJECTITEM_RES		ov_kscln_xdr_KS_CROBIT_RES
#define ov_ksclient_xdr_KS_DELETEOBJECT_PAR			ov_kscln_xdr_KS_DLOB_PAR
#define ov_ksclient_xdr_KS_DELETEOBJECT_RES			ov_kscln_xdr_KS_DLOB_RES
#define ov_ksclient_xdr_KS_RENAMEOBJECT_PAR			ov_kscln_xdr_KS_REOB_PAR
#define ov_ksclient_xdr_KS_RENAMEOBJECT_RES			ov_kscln_xdr_KS_REOB_RES
#define ov_ksclient_xdr_KS_RENAMEOBJECTITEM_RES		ov_kscln_xdr_KS_REOBIT_RES
#define ov_ksclient_xdr_KS_GETCANONICALPATH_PAR		ov_kscln_xdr_KS_GCP_PAR
#define ov_ksclient_xdr_KS_GETCANONICALPATH_RES		ov_kscln_xdr_KS_GCP_RES
#define ov_ksclient_xdr_KS_GETCANONICALPATHITEM_RES	ov_kscln_xdr_KS_GCPIT_RES
#endif

/*
*	shared datatypes ACPLT/KS -- ACPLT/OV
*/
typedef OV_BOOL					KS_BOOL;
typedef OV_UINT					KS_UINT;
typedef OV_STRING				KS_STRING;
typedef OV_TIME					KS_TIME;
typedef OV_TIME_SPAN			KS_TIME_SPAN;
typedef OV_VAR_VALUE			KS_VAR_VALUE;
typedef OV_TICKET				KS_AVMODULE;
typedef OV_VAR_CURRENT_PROPS	KS_VAR_CURRENT_PROPS;

/*
*	KS_VAR_PROJECTED_PROPS:
*	-----------------------
*	Projected properites of a variable.
*/
typedef OV_VAR_PROJECTED_PROPS	KS_VAR_PROJECTED_PROPS;

/*
*	KS_LINK_PROJECTED_PROPS:
*	------------------------
*	Projected properites of a link.
*/
typedef OV_LINK_PROJECTED_PROPS	KS_LINK_PROJECTED_PROPS;

/*
*	KS_OBJ_PROJECTED_PROPS:
*	-----------------------
*	Projected properties of an communication object.
*/
typedef struct {
	KS_OBJ_TYPE	objtype;
	union {
		KS_VAR_PROJECTED_PROPS	var_projected_props;
		KS_LINK_PROJECTED_PROPS	link_projected_props;
	}	KS_OBJ_PROJECTED_PROPS_u;
	KS_STRING	identifier;
	KS_TIME		creation_time;
	KS_STRING	comment;
	KS_ACCESS	access;
}	KS_OBJ_PROJECTED_PROPS;

/*
*	KS_GETPP_PAR:
*	-------------
*	Parameters of a GetPP service.
*/
typedef OV_GETPP_PAR	KS_GETPP_PAR;

/*
*	KS_GETPP_RES:
*	-------------
*	Result of a GetPP service.
*/
typedef struct {
	KS_RESULT				result;
	KS_UINT					items_len;	/* only, if result == KS_ERR_OK */
	KS_OBJ_PROJECTED_PROPS	*items_val;	/* only, if result == KS_ERR_OK */
}	KS_GETPP_RES;

/*
*	KS_GETVAR_ITEM:
*	---------------
*	Item of the GetVar/DataExchange service result.
*/
typedef OV_GETVAR_ITEM	KS_GETVAR_ITEM;

/*
*	KS_GETVAR_PAR:
*	--------------
*	Parameters of a GetVar service.
*/
typedef OV_GETVAR_PAR	KS_GETVAR_PAR;

/*
*	KS_GETVAR_RES:
*	--------------
*	Result of a GetVar service.
*/
typedef OV_GETVAR_RES	KS_GETVAR_RES;

/*
*	KS_SETVAR_ITEM:
*	---------------
*	Item of the SetVar/DataExchange service parameters.
*/
typedef OV_SETVAR_ITEM	KS_SETVAR_ITEM;

/*
*	KS_SETVAR_PAR:
*	--------------
*	Parameters of a SetVar service.
*/
typedef OV_SETVAR_PAR	KS_SETVAR_PAR;

/*
*	KS_SETVAR_RES:
*	--------------
*	Result of a SetVar service.
*/
typedef OV_SETVAR_RES	KS_SETVAR_RES;

/*
*	KS_EXGDATA_PAR:
*	---------------
*	Parameters of a DataExchange service.
*/
typedef OV_EXGDATA_PAR	KS_EXGDATA_PAR;

/*
*	KS_EXGDATA_RES:
*	---------------
*	Result of DataExchange service.
*/
typedef OV_EXGDATA_RES	KS_EXGDATA_RES;

/*
*	KS_DOMAIN_ENGINEERED_PROPS:
*	--------------------------
*	Engineered properites of a domain.
*/
typedef OV_DOMAIN_ENGINEERED_PROPS	KS_DOMAIN_ENGINEERED_PROPS;

/*
*	KS_VAR_ENGINEERED_PROPS:
*	-----------------------
*	Engineered properites of a variable.
*/
typedef OV_VAR_ENGINEERED_PROPS	KS_VAR_ENGINEERED_PROPS;

/*
*	KS_LINK_ENGINEERED_PROPS:
*	------------------------
*	Engineered properites of a link.
*/
typedef OV_LINK_ENGINEERED_PROPS	KS_LINK_ENGINEERED_PROPS;

/*
*	KS_OBJ_ENGINEERED_PROPS:
*	-----------------------
*	Engineered properties of an communication object.
*/
typedef struct {
	KS_OBJ_TYPE	objtype;
	union {
		KS_DOMAIN_ENGINEERED_PROPS	domain_engineered_props;
		KS_VAR_ENGINEERED_PROPS		var_engineered_props;
		KS_LINK_ENGINEERED_PROPS	link_engineered_props;
	}	KS_OBJ_ENGINEERED_PROPS_u;
	KS_STRING			identifier;
	KS_TIME				creation_time;
	KS_STRING			comment;
	KS_ACCESS			access;
	KS_SEMANTIC_FLAGS	semantic_flags;
}	KS_OBJ_ENGINEERED_PROPS;

/*
*	KS_GETEP_PAR:
*	-------------
*	Parameters of a GetEP service.
*/
typedef OV_GETEP_PAR	KS_GETEP_PAR;

/*
*	KS_GETEP_RES:
*	-------------
*	Result of a GetEP service.
*/
typedef struct {
	KS_RESULT				result;
	KS_UINT					items_len;	/* only, if result == KS_ERR_OK */
	KS_OBJ_ENGINEERED_PROPS	*items_val;	/* only, if result == KS_ERR_OK */
}	KS_GETEP_RES;

/*
*	KS_PLACEMENT:
*	-------------
*	Placement of a Link/CreateObject service.
*/
typedef OV_PLACEMENT	KS_PLACEMENT;

/*
*	KS_LINK_ITEM:
*	-------------
*	Item of the Link/CreateObject service parameters.
*/
typedef OV_LINK_ITEM	KS_LINK_ITEM;	

/*
*	KS_UNLINK_ITEM:
*	---------------
*	Item of the Link service parameters.
*/
typedef OV_UNLINK_ITEM	KS_UNLINK_ITEM;

/*
*	KS_CREATEOBJ_ITEM:
*	------------------
*	Item of the CreateObject service parameters.
*/
typedef OV_CREATEOBJ_ITEM	KS_CREATEOBJ_ITEM;

/*
*	KS_CREATEOBJECT_PAR:
*	--------------------
*	Parameters of the CreateObject service.
*/
typedef OV_CREATEOBJECT_PAR	KS_CREATEOBJECT_PAR;

/*
*	KS_CREATEOBJECTITEM_RES:
*	------------------------
*	Result item of a CreateObject service result.
*/
typedef OV_CREATEOBJECTITEM_RES	KS_CREATEOBJECTITEM_RES;

/*
*	KS_CREATEOBJECT_RES:
*	--------------------
*	Result of a CreateObject service.
*/
typedef OV_CREATEOBJECT_RES	KS_CREATEOBJECT_RES;

/*
*	KS_DELETEOBJECT_PAR:
*	--------------------
*	Parameters of a DeleteObject service.
*/
typedef OV_DELETEOBJECT_PAR	KS_DELETEOBJECT_PAR;

/*
*	KS_DELETEOBJECT_RES:
*	--------------------
*	Result of a DeleteObject service.
*/
typedef OV_DELETEOBJECT_RES	KS_DELETEOBJECT_RES;

/*
*	KS_RENAMEOBJECT_ITEM:
*	---------------------
*	Item of the RenameObject service parameters.
*/
typedef OV_RENAMEOBJECT_ITEM	KS_RENAMEOBJECT_ITEM;

/*
*	KS_RENAMEOBJECT_PAR:
*	--------------------
*	Parameters of a RenameObject Service
*/
typedef OV_RENAMEOBJECT_PAR	KS_RENAMEOBJECT_PAR;

/*
*	KS_RENAMEOBJECT_RES:
*	--------------------
*	Result of a RenameObject Service
*/
typedef OV_RENAMEOBJECT_RES	KS_RENAMEOBJECT_RES;

/*
*	KS_GETCANONICALPATH_PAR:
*	------------------------
*	Parameters of a GetCanonicalPath Service
*/
typedef OV_GETCANONICALPATH_PAR	KS_GETCANONICALPATH_PAR;

/*
*	KS_GETCANONICALPATHITEM_RES:
*	----------------------------
*	Result item of a GetCanonicalPath Service
*/
typedef OV_GETCANONICALPATHITEM_RES	KS_GETCANONICALPATHITEM_RES;

/*
*	KS_GETCANONICALPATH_RES:
*	------------------------
*	Result of a GetCanonicalPath Service
*/
typedef OV_GETCANONICALPATH_RES	KS_GETCANONICALPATH_RES;;

/*
*	KS_LINK_PAR:
*	------------
*	Parameters of a Link service.
*/
typedef OV_LINK_PAR	KS_LINK_PAR;

/*
*	KS_LINK_RES:
*	------------
*	Result of a Link service.
*/
typedef OV_LINK_RES	KS_LINK_RES;

/*
*	KS_UNLINK_PAR:
*	--------------
*	Parameters of an Unlink service.
*/
typedef OV_UNLINK_PAR	KS_UNLINK_PAR;

/*
*	KS_UNLINK_RES:
*	--------------
*	Result of an Unlink service.
*/
typedef OV_UNLINK_RES	KS_UNLINK_RES;

/*
*	The following part is only visible inside the library
*	-----------------------------------------------------
*/
#ifdef OV_COMPILE_LIBOVKS

/*
*	XDR routine for bytes
*/
OV_BOOL ov_ksclient_xdr_bytes(
	XDR		*xdrs,
	char	**cpp,
	OV_UINT	*sizep,
	OV_UINT	maxsize
);

/*
*	XDR routine for arrays
*/
OV_BOOL ov_ksclient_xdr_array(
	XDR			*xdrs,
	char		**addrp,
	OV_UINT		*sizep,
	OV_UINT		maxsize,
	OV_UINT		elsize,
	xdrproc_t	elproc
);

/*
*	XDR routine for KS_ENUM
*/
#define ov_ksclient_xdr_KS_ENUM	xdr_enum

/*
*	XDR routine for KS_BOOL
*/
#define ov_ksclient_xdr_KS_BOOL	xdr_bool

/*
*	XDR routine for KS_INT
*/
#define ov_ksclient_xdr_KS_INT	xdr_long

/*
*	XDR routine for KS_UINT
*/
#define ov_ksclient_xdr_KS_UINT	xdr_u_long

/*
*	XDR routine for KS_SINGLE
*/
#define ov_ksclient_xdr_KS_SINGLE	xdr_float

/*
*	XDR routine for KS_DOUBLE
*/
#define ov_ksclient_xdr_KS_DOUBLE	xdr_double

/*
*	XDR routine for KS_TIME
*/
KS_BOOL ov_ksclient_xdr_KS_TIME(
	XDR		*xdrs,
	KS_TIME	*objp
);

/*
*	XDR routine for KS_TIME_SPAN
*/
KS_BOOL ov_ksclient_xdr_KS_TIME_SPAN(
	XDR				*xdrs,
	KS_TIME_SPAN	*objp
);

/*
*	XDR routine for KS_STRING
*/
KS_BOOL ov_ksclient_xdr_KS_STRING(
	XDR			*xdrs,
	KS_STRING	*objp
);

/*
*	XDR routine for KS_RESULT
*/
#define ov_ksclient_xdr_KS_RESULT	ov_ksclient_xdr_KS_ENUM

/*
*	XDR routine for KS_TICKET_TYPE
*/
#define ov_ksclient_xdr_KS_TICKET_TYPE	ov_ksclient_xdr_KS_ENUM

/*
*	XDR routine for KS_VAR_TYPE
*/
#define ov_ksclient_xdr_KS_VAR_TYPE	ov_ksclient_xdr_KS_ENUM

/*
*	XDR routine for KS_STATE
*/
#define ov_ksclient_xdr_KS_STATE	ov_ksclient_xdr_KS_ENUM

/*
*	XDR routine for KS_OBJ_TYPE
*/
#define ov_ksclient_xdr_KS_OBJ_TYPE	ov_ksclient_xdr_KS_ENUM

/*
*	XDR routine for KS_ACCESS
*/
#define ov_ksclient_xdr_KS_ACCESS	ov_ksclient_xdr_KS_ENUM

/*
*	XDR routine for KS_LINK_TYPE
*/
#define ov_ksclient_xdr_KS_LINK_TYPE	ov_ksclient_xdr_KS_ENUM

/*
*	XDR routine for KS_PLACEMENT_HINT
*/
#define ov_ksclient_xdr_KS_PLACEMENT_HINT	ov_ksclient_xdr_KS_ENUM

/*
*	XDR routine for KS_SEMANTIC_FLAGS
*/
#define ov_ksclient_xdr_KS_SEMANTIC_FLAGS	xdr_u_long

/*
*	XDR routine for KS_EP_FLAGS
*/
#define ov_ksclient_xdr_KS_EP_FLAGS	ov_ksclient_xdr_KS_ENUM

/*
*	XDR routine for KS_AVMODULE_PAR
*/
KS_BOOL ov_ksclient_xdr_KS_AVMODULE_PAR(
	XDR			*xdrs,
	KS_AVMODULE	*objp
);

/*
*	XDR routine for KS_AVMODLUE_RES
*/
KS_BOOL ov_ksclient_xdr_KS_AVMODULE_RES(
	XDR			*xdrs,
	KS_AVMODULE	*objp
);

/*
*	XDR routine for KS_VAR_VALUE
*/
KS_BOOL ov_ksclient_xdr_KS_VAR_VALUE(
	XDR				*xdrs,
	KS_VAR_VALUE	*objp
);

/*
*	XDR routine for KS_VAR_PROJECTED_PROPS
*/
KS_BOOL ov_ksclient_xdr_KS_VAR_PROJECTED_PROPS(
	XDR						*xdrs,
	KS_VAR_PROJECTED_PROPS	*objp
);

/*
*	XDR routine for KS_VAR_CURRENT_PROPS
*/
KS_BOOL ov_ksclient_xdr_KS_VAR_CURRENT_PROPS(
	XDR						*xdrs,
	KS_VAR_CURRENT_PROPS	*objp
);

/*
*	XDR routine for KS_LINK_PROJECTED_PROPS
*/
KS_BOOL ov_ksclient_xdr_KS_LINK_PROJECTED_PROPS(
	XDR						*xdrs,
	KS_LINK_PROJECTED_PROPS	*objp
);

/*
*	XDR routine for KS_OBJ_PROJECTED_PROPS
*/
KS_BOOL ov_ksclient_xdr_KS_OBJ_PROJECTED_PROPS(
	XDR						*xdrs,
	KS_OBJ_PROJECTED_PROPS	*objp
);

/*
*	XDR routine for KS_GETPP_PAR
*/
KS_BOOL ov_ksclient_xdr_KS_GETPP_PAR(
	XDR				*xdrs,
	KS_GETPP_PAR	*objp
);

/*
*	XDR routine for KS_GETPP_RES
*/
KS_BOOL ov_ksclient_xdr_KS_GETPP_RES(
	XDR				*xdrs,
	KS_GETPP_RES	*objp
);

/*
*	XDR routine for KS_GETVAR_ITEM
*/
KS_BOOL ov_ksclient_xdr_KS_GETVAR_ITEM(
	XDR				*xdrs,
	KS_GETVAR_ITEM	*objp
);

/*
*	XDR routine for KS_GETVAR_PAR
*/
KS_BOOL ov_ksclient_xdr_KS_GETVAR_PAR(
	XDR				*xdrs,
	KS_GETVAR_PAR	*objp
);

/*
*	XDR routine for KS_GETVAR_RES
*/
KS_BOOL ov_ksclient_xdr_KS_GETVAR_RES(
	XDR				*xdrs,
	KS_GETVAR_RES	*objp
);

/*
*	XDR routine for KS_SETVAR_ITEM
*/
KS_BOOL ov_ksclient_xdr_KS_SETVAR_ITEM(
	XDR				*xdrs,
	KS_SETVAR_ITEM	*objp
);

/*
*	XDR routine for KS_SETVAR_PAR
*/
KS_BOOL ov_ksclient_xdr_KS_SETVAR_PAR(
	XDR				*xdrs,
	KS_SETVAR_PAR	*objp
);

/*
*	XDR routine for KS_SETVAR_RES
*/
KS_BOOL ov_ksclient_xdr_KS_SETVAR_RES(
	XDR				*xdrs,
	KS_SETVAR_RES	*objp
);

/*
*	XDR routine for KS_EXGDATA_PAR
*/
KS_BOOL ov_ksclient_xdr_KS_EXGDATA_PAR(
	XDR				*xdrs,
	KS_EXGDATA_PAR	*objp
);

/*
*	XDR routine for KS_EXGDATA_RES
*/
KS_BOOL ov_ksclient_xdr_KS_EXGDATA_RES(
	XDR				*xdrs,
	KS_EXGDATA_RES	*objp
);

/*
*	XDR routine for KS_DOMAIN_ENGINEERED_PROPS
*/
KS_BOOL ov_ksclient_xdr_KS_DOMAIN_ENGINEERED_PROPS(
	XDR							*xdrs,
	KS_DOMAIN_ENGINEERED_PROPS	*objp
);

/*
*	XDR routine for KS_VAR_ENGINEERED_PROPS
*/
KS_BOOL ov_ksclient_xdr_KS_VAR_ENGINEERED_PROPS(
	XDR						*xdrs,
	KS_VAR_ENGINEERED_PROPS	*objp
);

/*
*	XDR routine for KS_LINK_ENGINEERED_PROPS
*/
KS_BOOL ov_ksclient_xdr_KS_LINK_ENGINEERED_PROPS(
	XDR							*xdrs,
	KS_LINK_ENGINEERED_PROPS	*objp
);

/*
*	XDR routine for KS_OBJ_ENGINEERED_PROPS
*/
KS_BOOL ov_ksclient_xdr_KS_OBJ_ENGINEERED_PROPS(
	XDR						*xdrs,
	KS_OBJ_ENGINEERED_PROPS	*objp
);

/*
*	XDR routine for KS_GETEP_PAR
*/
KS_BOOL ov_ksclient_xdr_KS_GETEP_PAR(
	XDR				*xdrs,
	KS_GETEP_PAR	*objp
);

/*
*	XDR routine for KS_GETEP_RES
*/
KS_BOOL ov_ksclient_xdr_KS_GETEP_RES(
	XDR				*xdrs,
	KS_GETEP_RES	*objp
);

/*
*	XDR routine for KS_PLACEMENT
*/
KS_BOOL ov_ksclient_xdr_KS_PLACEMENT(
	XDR				*xdrs,
	KS_PLACEMENT	*objp
);

/*
*	XDR routine for KS_LINK_ITEM
*/
KS_BOOL ov_ksclient_xdr_KS_LINK_ITEM(
	XDR				*xdrs,
	KS_LINK_ITEM	*objp
);

/*
*	XDR routine for KS_UNLINK_ITEM
*/
KS_BOOL ov_ksclient_xdr_KS_UNLINK_ITEM(
	XDR				*xdrs,
	KS_UNLINK_ITEM	*objp
);

/*
*	XDR routine for KS_CREATEOBJ_ITEM
*/
KS_BOOL ov_ksclient_xdr_KS_CREATEOBJ_ITEM(
	XDR					*xdrs,
	KS_CREATEOBJ_ITEM	*objp
);

/*
*	XDR routine for KS_KS_CREATEOBJECT_PAR
*/
KS_BOOL ov_ksclient_xdr_KS_CREATEOBJECT_PAR(
	XDR					*xdrs,
	KS_CREATEOBJECT_PAR	*objp
);

/*
*	XDR routine for KS_CREATEOBJECTITEM_RES
*/
KS_BOOL ov_ksclient_xdr_KS_CREATEOBJECTITEM_RES(
	XDR						*xdrs,
	KS_CREATEOBJECTITEM_RES	*objp
);

/*
*	XDR routine for KS_CREATEOBJECT_RES
*/
KS_BOOL ov_ksclient_xdr_KS_CREATEOBJECT_RES(
	XDR					*xdrs,
	KS_CREATEOBJECT_RES	*objp
);

/*
*	XDR routine for KS_DELETEOBJECT_PAR
*/
KS_BOOL ov_ksclient_xdr_KS_DELETEOBJECT_PAR(
	XDR					*xdrs,
	KS_DELETEOBJECT_PAR	*objp
);

/*
*	XDR routine for KS_DELETEOBJECT_RES
*/
KS_BOOL ov_ksclient_xdr_KS_DELETEOBJECT_RES(
	XDR					*xdrs,
	KS_DELETEOBJECT_RES	*objp
);

/*
*	XDR routine for KS_RENAMEOBJECT_ITEM
*/
KS_BOOL ov_ksclient_xdr_KS_RENAMEOBJECT_ITEM(
	XDR						*xdrs,
	KS_RENAMEOBJECT_ITEM	*objp
);

/*
*	XDR routine for KS_RENAMEOBJECT_PAR
*/
KS_BOOL ov_ksclient_xdr_KS_RENAMEOBJECT_PAR(
	XDR					*xdrs,
	KS_RENAMEOBJECT_PAR	*objp
);

/*
*	XDR routine for KS_RENAMEOBJECT_RES
*/
KS_BOOL ov_ksclient_xdr_KS_RENAMEOBJECT_RES(
	XDR					*xdrs,
	KS_RENAMEOBJECT_RES	*objp
);

/*
*	XDR routine for KS_GETCANONICALPATH_PAR
*/
KS_BOOL ov_ksclient_xdr_KS_GETCANONICALPATH_PAR(
	XDR						*xdrs,
	KS_GETCANONICALPATH_PAR	*objp
);

/*
*	XDR routine for KS_GETCANONICALPATHITEM_RES
*/
KS_BOOL ov_ksclient_xdr_KS_GETCANONICALPATHITEM_RES(
	XDR							*xdrs,
	KS_GETCANONICALPATHITEM_RES	*objp
);

/*
*	XDR routine for KS_GETCANONICALPATH_RES
*/
KS_BOOL ov_ksclient_xdr_KS_GETCANONICALPATH_RES(
	XDR						*xdrs,
	KS_GETCANONICALPATH_RES	*objp
);

/*
*	XDR routine for KS_LINK_PAR
*/
KS_BOOL ov_ksclient_xdr_KS_LINK_PAR(
	XDR			*xdrs,
	KS_LINK_PAR	*objp
);

/*
*	XDR routine for KS_LINK_RES
*/
KS_BOOL ov_ksclient_xdr_KS_LINK_RES(
	XDR			*xdrs,
	KS_LINK_RES	*objp
);

/*
*	XDR routine for KS_UNLINK_PAR
*/
KS_BOOL ov_ksclient_xdr_KS_UNLINK_PAR(
	XDR				*xdrs,
	KS_UNLINK_PAR	*objp
);

/*
*	XDR routine for KS_UNLINK_RES
*/
KS_BOOL ov_ksclient_xdr_KS_UNLINK_RES(
	XDR				*xdrs,
	KS_UNLINK_RES	*objp
);

#endif	/* OV_COMPILE_LIBOVKS */

#ifdef __cplusplus
}	/* extern "C" */
#endif

#endif
/*
*	End of file
*/

