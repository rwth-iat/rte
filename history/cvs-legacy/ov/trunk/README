The ACPLT/OV C++ Object Management Libraris and Utilities
=========================================================

This is release 1.2.0 of the ACPLT/OV object management libraries
and the associated utilities:
- libov (basic object management library),
- libovks (ACPLT/KS integration with ACPLT/OV),
- ov_codegen (C code generator),
- ov_dbutil (database utility),
- ov_server (generic ACPLT/KS server for ACPLT/OV),
- ov_ntservice (generic ACPLT/KS server for ACPLT/OV implemented
  as a Windows NT service).

Enjoy!



1. Introduction
---------------

The generic object management system ACPLT/OV enables an easy use of
object management functionality in process control components. This
functionality can be devided into the following groups:

1.1 Management of objects and their relationships
-------------------------------------------------
Objects and their relationships are stored in a persistent database.
At run time, objects and their relationsships (which are described by
links) may be created or deleted and attributes or objects may be read
or modified. Rather than just storing data, objects own operations 
encapsulating their functionality. Objects may even be active objects,
which means that they are actively process data. The complete contents
of a database can always be exported to the generic human-readable 
ACPLT/OV instance desription language which may be modified and be
reimported to an existing or new database.

1.2 Implementation of objects and their relationships
-----------------------------------------------------
Objects are classified by (object) classes, relationships are 
classified by associations. The implementation of classes is carried 
out in ANSI C which provides a high portability -- ACPLT/OV not only 
runs on a workstation but also on a microcontroller! While ANSI C
lacks a support for object oriented programming, the ACPLT/OV C code 
generator automatically creates virtual function tables and the 
ACPLT/OV library helps out with many functions and macros supporting
the object oriented programming style. The input for the C code 
generator is the ACPLT/OV modelling language (see below). 
Implementations of classes and associations are grouped to libraries,
which may be DLLs or shared libraries and can be loaded into the 
system at run time.

1.3 Information about information: meta information
---------------------------------------------------
The class and association definitions provided by the ACPLT/OV
modelling language do not only support the implementation; rather they
are converted into meta objects, which are instances of the ACPLT/OV 
meta model. If a library is loaded, these meta objects are instantiated
in the database. The benefits are:
- Reflection: Objects may explore the meta information about themselves 
  or other objects (of which class they are, which variables they own 
  or the like).
- Introspection: Clients may explore the database, which is -- due to 
  the meta information -- self descriptive. This means, that you do
  NOT have to configure anything to access any information (see the
  following topic).

1.4 Information access at run time
----------------------------------
The information stored in the attributes of the managed objects as well
as structural information about the objects and their relationships can 
be accessed over the network through an integrated ACPLT/KS server. 

1.5 Engineering functionality at run time
-----------------------------------------
ACPLT/OV does not only show "a picture of the world inside" but also
allows to modify the (engineered) structure of the object system through
the CreateObject, DeleteObject, Link and Unlink services provided by
the integrated ACPLT/KS server.



2. Compiling the Library
------------------------

Also make sure you have all the source code:

ACPLT/OV:      source code of the ACPLT/OV libraries and utilties,
GNU MP-Malloc: at least header files and precompiled library,
ACPLT/KS:      source code of the ACPLT/KS-libraries (at least version 2),
Sun ONC/RPC:   at least header files, precompiled library and rpcgen.

The procedures described below will build and install the ACPLT/OV C code 
generator, the basic ACPLT/OV library libov, the database utility ov_dbutil, 
the library integrating ACPLT/OV with ACPLT/KS libovks and the ACPLT/KS 
server for ACPLT/OV ov_server.

2.1 Un*x
--------

Make sure you have the right tools:

GNU Tools:   make (version 3.75), gcc/g++ (version 2.7.2.1), 
             ar (version 970202) , ranlib (version 970202), 
             flex (version 2.5.4), bison (version 1.25) 
             and perl (Version 5.003).

Change to the approriate ACPLT/OV build directory, e.g.:

	$ cd acplt/ov/build/linux

Create dependencies:

	$ make depend

Compile and install:

	$ make
	$ make install

2.2 Windows NT
--------------

If compiling ACPLT/OV for Windows NT, you may choose between the Cygnus 
port of the GNU tools Cygwin (in particulare the gcc/g++ compiler) to 
the WIN32 environment and the Borland C++ compiler.

2.2.1 Windows NT/Cygwin
-----------------------

You will need the Cygwin B20.1 including a properly installed make 
(version 3.75), flex (version 2.5), bison (version 1.25) and libstdc++ 
for the mingw32 environment.

On the command line, change to the approriate ACPLT/OV build directory:

	c:\> cd acplt\ov\build\cygwin

Create dependencies:

	c:\acplt\ov\build\cygwin> make depend

Compile and install:

	c:\acplt\ov\build\cygwin> make
	c:\acplt\ov\build\cygwin> make install

2.2.2 Windows NT/Borland
------------------------

You will need Borland C++ 5.0 (bcc32, brc32, tlib and implib) as well
as a properly installed Win32 port of GNU make (version 3.75), flex 
(version 2.5) and bison (version 1.25).

Note, that we do NOT use Borland make but GNU make, so make sure that
GNU make will be called if you type "make" on the command line. (I 
would suggest you rename Borland Make from "make.exe" to "bmake.exe").

On the command line, change to the approriate ACPLT/OV build directory:

	c:\> cd acplt\ov\build\nt

Compile and install:

	c:\acplt\ov\build\cygwin> make
	c:\acplt\ov\build\cygwin> make install

Note, that under Borland you are not able to create the dependencies.

Dirk Meyer <dirk@plt.rwth-aachen.de>
Lehrstuhl fuer Prozessleittechnik
RWTH Aachen, D-52056 Aachen, Germany

