# -*- Makefile -*-
# Simple and crazy makefile for OpenVMS (libks)
#

###### change path names according to your system !!!
# NOTE: /float=ieee_float has been removed, as it causes incompatibilites
#       with all ONC/RPC on other platforms (different float format).

# The repository should be on a local drive.
REPOSITORY = acplt$$repository

CXX = cxx
LD = cxxlink


# choose your switches
CXX_FLAGS = /OPTIMIZE /NAMES=SHORTENED
# CXX_FLAGS = /DEBUG

LD_FLAGS = /repository=(acplt$$repository)
# LD_FLAGS = /DEBUG

# The following set of flags compiles with optimization and no PLT debugging
# helpers (no alloc tracker, no debugging messages)
CXX_DEFINES = PLT_USE_BUFFERED_STREAMS=1,PLT_SYSTEM_OPENVMS=1,NDEBUG=1,FD_SETSIZE=1024

# Enable next set of flags when using the new server-side dynamic XDR
# streams, which buffer client i/o. (Prevents servers from blocking in i/o).
#CXX_DEFINES = PLT_SYSTEM_OPENVMS=1,NDEBUG=1,PLT_USE_BUFFERED_STREAMS=1,FD_SETSIZE=1024

###### no modification below this line ####################

CXX_EXTRA_FLAGS = \
	/warnings=(disable=(EXTRASEMI)) \
	/notemplate_define \
	/repository=($(REPOSITORY))


AR = library

### Filename conventions
O = .obj
A = .olb
EXE = .exe

PLTDIR = [-.-.-.plt]
SRCDIR = [-.-.src]
CXX_INCLUDES = "../openvms","../../include","../../../plt/include"

LIBKS = libks$(A)
LIBKSSVR = libkssvr$(A)
LIBKSCLN = libkscln$(A)

LIBPLT = [-.-.-.plt.build.openvms]libplt$(A)

LIBRPC = sys$$sysdevice:[vms$$common.ucx$$lib.rpc]ucx$$rpcxdr

.SUFFIXES:

.SUFFIXES: .cpp $(O) $(A) $(EXE)

### The VPATH mechanism isn't supported yet...
#VPATH = "../../src"

all: libks$(A) libkssvr$(A) libkscln$(A)

### Include generic part (generic dependencies)
include [-]generic.mk

CXX_COMPILE = $(CXX) \
		$(CXX_EXTRA_FLAGS) \
		/define=($(CXX_DEFINES)) \
		/include=($(CXX_INCLUDES)) \
		$(CXX_FLAGS)

### Include auto dependencies
include [-]depend.vms

$(LIBKS_OBJECTS): %.obj: [-.-.src]%.cpp
	if (f$$search("$@").nes."") then del $@;* /nolog
	$(CXX_COMPILE) $<

$(LIBKSSVR_OBJECTS): %.obj: [-.-.src]%.cpp	
	if (f$$search("$@").nes."") then del $@;* /nolog
	$(CXX_COMPILE) $<

$(LIBKSCLN_OBJECTS): %.obj: [-.-.src]%.cpp	
	if (f$$search("$@").nes."") then del $@;* /nolog
	$(CXX_COMPILE) $<

$(EXAMPLES_OBJECTS): %.obj: [-.-.examples]%.cpp
	if (f$$search("$@").nes."") then del $@;* /nolog
	$(CXX_COMPILE) $<

############# ??

ucx$$ioctl_routine$(O):
	$(CXX_COMPILE) /prefix=ALL ucx$$examples:ucx$$ioctl_routine.c

############# executables ######################

pmobile.exe : pmobile$(O) pmobile_code$(O) $(LIBKSCLN) $(LIBKS)
	if (f$$search("$@").nes."") then del $@;* /nolog
	$(LD) $(LD_FLAGS) pmobile$(O),pmobile_code$(O),$(LIBKSCLN)/lib,$(LIBKS)/lib,$(LIBPLT)/lib,$(LIBRPC)/lib

tclient.exe : tclient$(O) tclient1$(O) $(LIBKSCLN) $(LIBKS)
	if (f$$search("$@").nes."") then del $@;* /nolog
	$(LD) $(LD_FLAGS) tclient$(O),tclient1$(O),$(LIBKSCLN)/lib,$(LIBKS)/lib,$(LIBPLT)/lib,$(LIBRPC)/lib

tmanager.exe: tmanager.obj tmanager1.obj $(LIBKSSVR) $(LIBKS)
	if (f$$search("$@").nes."") then del $@;* /nolog
	$(LD) $(LD_FLAGS) tmanager.obj,tmanager1.obj,$(LIBKSSVR)/lib,$(LIBKS)/lib,$(LIBPLT)/lib,$(LIBRPC)/lib

tserver.exe: tserver.obj tserver1.obj ext_sp.obj $(LIBKSSVR) $(LIBKS)
	if (f$$search("$@").nes."") then del $@;* /nolog
	$(LD) $(LD_FLAGS) tserver.obj,tserver1.obj,ext_sp.obj,$(LIBKSSVR)/lib,$(LIBKS)/lib,$(LIBPLT)/lib,$(LIBRPC)/lib

tsclient.exe : tsclient.obj tsclient1.obj svrrpcctx$(O) $(LIBKS)
	if (f$$search("$@").nes."") then del $@;* /nolog
	$(LD) $(LD_FLAGS) tsclient.obj,tsclient1.obj,svrrpcctx.obj,$(LIBKS)/lib,$(LIBPLT)/lib,$(LIBRPC)/lib

tshell.exe : tshell.obj $(LIBKSCLN) $(LIBKS)
	if (f$$search("$@").nes."") then del $@;* /nolog
	$(LD) $(LD_FLAGS) tshell.obj,$(LIBKSCLN)/lib,$(LIBKS)/lib,$(LIBPLT)/lib,$(LIBRPC)/lib

ttree.exe : ttree.obj ttree1.obj $(LIBKSCLN) $(LIBKS)
	if (f$$search("$@").nes."") then del $@;* /nolog
	$(LD) $(LD_FLAGS) ttree.obj,ttree1.obj,$(LIBKSCLN)/lib,$(LIBKS)/lib,$(LIBPLT)/lib,$(LIBRPC)/lib


############ libraries #####################

libks$(A): $(LIBKS_OBJECTS)
	if (f$$search("$@").nes."") then del $@;* /nolog
	$(AR) /create libks$(A) $^

libkssvr$(A): $(LIBKSSVR_OBJECTS) ucx$$ioctl_routine$(O)
	if (f$$search("$@").nes."") then del $@;* /nolog
	$(AR) /create libkssvr$(A) $^

libkscln$(A): $(LIBKSCLN_OBJECTS)
	if (f$$search("$@").nes."") then del $@;* /nolog
	$(AR) /create libkscln$(A) $^

clean:
	if (f$$search("*$(O)").nes."") then del *$(O);* /nolog
	if (f$$search("libks$(A)").nes."") then del libks$(A);* /nolog
	if (f$$search("libkssvr$(A)").nes."") then del libkssvr$(A);* /nolog
	if (f$$search("libkscln$(A)").nes."") then del libkscln$(A);* /nolog
	if (f$$search("t*$(EXE)").nes."") then del t*$(EXE);* /nolog

# EOF makefile.vms




