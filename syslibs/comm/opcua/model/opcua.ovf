#ifndef opcua_OVF_INCLUDED
#define opcua_OVF_INCLUDED

#include "opcua.ovt"
#include "libov/ov_macros.h"
#include "libov/ov_path.h"



typedef UA_Nodestore* UA_FNC_OVNODESTOREINTERFACE2NEW();
typedef void UA_FNC_OVNODESTOREINTERFACE2DELETE(UA_Nodestore * nodestoreInterface);
	
/* opcua-Server functions */
typedef UA_StatusCode UA_FNC_ADDINFORMATIONMODEL(OV_STRING *namespaces, OV_UINT namespaceIndex, OV_UINT namespaceSize, OV_STRING *StartFolder, opcua_loadInformationModel *loadInfoModel);
typedef UA_Int32 UA_FNC_RESOLVENODEIDTOPATH(UA_NodeId nodeId, OV_PATH* pPath);
typedef OV_INSTPTR_ov_object UA_FNC_RESOLVENDOEIDTOOVOBJECT(UA_NodeId *nodeId);
typedef UA_Int32 UA_FNC_GETVTBLPOINTERANDCHECKACCESS(OV_ELEMENT *pelem, OV_TICKET* pTicket, OV_INSTPTR_ov_object *pInstance, OV_VTBLPTR_ov_object *ppVtblObj, OV_ACCESS *access);


typedef UA_StatusCode UA_FNC_STARTNL(
	UA_ServerNetworkLayer *nl, 
	const UA_String *customHostname
	//UA_Logger logger
);

typedef size_t UA_FNC_NLGETWORK(
	UA_ServerNetworkLayer *nl, 
	UA_Server *server, 
	UA_UInt16 timeout
);


typedef void UA_FNC_STOPNL(
//typedef size_t UA_FNC_STOPNL(
	UA_ServerNetworkLayer *nl, 
	UA_Server *server
);

typedef void UA_FNC_DELETENL(
	UA_ServerNetworkLayer *nl
);

	
#endif

