#include "ov.ovm"
#include "ksbase.ovm"

/*
    TODO: introduce a uaReference class to mirror references to outside namespaces and adapt the browse functions accordingly (return nodeId should suffice, I hope)
*/

LIBRARY opcua
    VERSION   = "V0.1 (DD-Mon-YYYY)";
    AUTHOR    = "Lars Evertz, Florian Palm, Torben Deppe";
    COPYRIGHT = "";
    COMMENT   = "Implements an OPC UA server with access to the models in the ov system. Commandline Options: UA_CertPath - Path to the server certificate file. Absolute or relative to the config file; UA_Port - specify the portNumber on which the UA-Server will listen.";
    
    CLASS uaServer        :    CLASS ksbase/ComTask
        IS_INSTANTIABLE;
        COMMENT = "Holds all necessarry data for a server - singleton. can only be instantiated once";
        VARIABLES
            LoginEnableAnonymous    :    BOOL
                HAS_ACCESSORS
                INITIALVALUE    =    TRUE;
             LoginEnableUsernamePassword    :    BOOL
                 HAS_ACCESSORS
                 INITIALVALUE    =    TRUE;
            LoginUsernames []    :    STRING
                HAS_ACCESSORS;
            LoginPasswords []    :    STRING
                HAS_ACCESSORS;
            LoginLoginsCount    :    UINT
                IS_DERIVED
                HAS_GET_ACCESSOR;
            ApplicationURI    :    STRING
                HAS_ACCESSORS
                INITIALVALUE    =    "urn:acplt:open62541:acplt-iec62541Server";
            ApplicationName    :    STRING
                HAS_ACCESSORS
                INITIALVALUE    =    "acplt-opcua";
            serverConfig        :    C_TYPE    <UA_ServerConfig>
                COMMENT =    "Stack-specific representation of server configuration";
            serverData            :    C_TYPE    <OV_PTR_UA_Server>
                COMMENT    =    "Stack-specific representation of server data";
            networkLayerOv        :    C_TYPE    <UA_ServerNetworkLayer>
                COMMENT    =    "Network layer within th ov-server";
           namespace          : STRING;
           namespaceNames[]     : STRING;
           namespaceIndex		: UINT;
           namespaceSize        : UINT;
        END_VARIABLES;    
        OPERATIONS
            constructor            :    C_FUNCTION <OV_FNC_CONSTRUCTOR>;
            destructor            :    C_FUNCTION <OV_FNC_DESTRUCTOR>;
            startup                :    C_FUNCTION <OV_FNC_STARTUP>;
            shutdown            :    C_FUNCTION <OV_FNC_SHUTDOWN>;
            getaccess            :    C_FUNCTION <OV_FNC_GETACCESS>;
            typemethod            :    C_FUNCTION <KSBASE_FNC_TYPEMETHOD>;
            addInformationModel         :      C_FUNCTION <UA_FNC_ADDINFORMATIONMODEL>;
        END_OPERATIONS;
    END_CLASS;
    
    /**     
      *    Checks whether received data complies with a OPC UA opening of a connection     
      *    criteria are:    1.    "HEL" in first three bytes of message        
      *                    2.    ProtocolVersion is not larger than the highest specified version number of opcua                      
      *                    3.    Message size (starting in byte 5) is larger than 32       
      *                    4.    Message size equals 32 + plus the given size in the EndpointUrl length field          
      */       
     CLASS uaIdentificator : CLASS ksbase/ProtocolIdentificator        
         IS_INSTANTIABLE;      
         COMMENT = "class for identifing ua communication";        
         VARIABLES     
             ident                :    STRING      
                 COMMENT            = "first bytes of initial package"     
                 INITIALVALUE    = "HEL";      
             msgMinSize            :    UINT       
                 COMMENT            = "Minimum size of a valid message"        
                 INITIALVALUE    = 32;     
             highestOPCVersion    : UINT       
                 COMMENT            = "Highest specified OPC UA Version number"        
                 INITIALVALUE    = 0;      
        END_VARIABLES;        
         OPERATIONS        
             constructor        :    C_FUNCTION    <OV_FNC_CONSTRUCTOR>;       
             identify        :    C_FUNCTION    <KSBASE_FNC_IDENTIFY>;     
             createClientHandler    :    C_FUNCTION    <KSBASE_FNC_CREATECH>;      
         END_OPERATIONS;       
     END_CLASS;        
           
     /**       
        Documentation of uaConnection.        
     */        
     CLASS uaConnection : CLASS ksbase/ClientHandler       
         IS_INSTANTIABLE;      
         VARIABLES     
            connection            :    C_TYPE    <UA_ConnectionPTR>       
                 COMMENT            =    "Connection data for this connection";        
             workNext            :    BOOL     
                 COMMENT            =    "If TRUE this connection has some work for the networkLayer"      
                 INITIALVALUE    =    FALSE;       
             buffer                :    C_TYPE    <KS_DATAPACKET>      
                 COMMENT            =    "Buffer to exchange date with the open62541-stack";       
        END_VARIABLES;        
         OPERATIONS        
             constructor            :    C_FUNCTION <OV_FNC_CONSTRUCTOR>;      
             destructor            :    C_FUNCTION <OV_FNC_DESTRUCTOR>;        
             startup                :    C_FUNCTION <OV_FNC_STARTUP>;      
             shutdown            :    C_FUNCTION    <OV_FNC_SHUTDOWN>;     
             /**       
              *    The HandleRequest function is called by a Channel after some data has arrived for this ClientHandler. It gets the pointer to the Channel, a pointer to the received data, and a pointer to the outData variable.        
              *    As this functions gets the pointers to the buffers of the Channel object it has to take care of a few things:       
              *        1. If the input data could be processed or if it is invalid it should be freed.     
              *        2. The Writeptr of the received data may not be altered.        
              *        3. The answers always have to be appended to the answer structure (use the ksbase_KSDATAPACKET_append function).        
              *        4. The readptr of the answer data may not be altered.       
              */       
             HandleRequest        :    C_FUNCTION    <KSBASE_FNC_HANDLEREQUEST>;       
             typemethod            :    C_FUNCTION <KSBASE_FNC_TYPEMETHOD>;        
         END_OPERATIONS;       
     END_CLASS;        
           
     /**       
         Documentation of ovNetworkLayer.      
     */        
     CLASS ovNetworkLayer : CLASS ov/object        
         IS_INSTANTIABLE;      
         VARIABLES     
        discoveryUrl    :    STRING       
             IS_DERIVED        
             HAS_GET_ACCESSOR      
             COMMENT        =    "Url for this server";        
         discoveryUrlInternal    :    C_TYPE    <UA_String>;       
         localConfig        :    C_TYPE <UA_ConnectionConfig>      
             COMMENT        =    "Configuration of connection";        
         connsToClose    :    C_TYPE <UA_ConnectionPTRPTR>     
             COMMENT        =    "List of Connections to close";       
         connsToCloseCount    :    UINT        
             COMMENT        =    "Number of Connections to close"      
             INITIALVALUE    =    0;       
     /*    messageBuffer    :    C_TYPE    <UA_ByteString>     
             COMMENT        =    "Receive buffer for messages (central buffer minimizes allocations)";*/       
     /*    sendBuffer        :    C_TYPE    <UA_ByteString>        
             COMMENT            =    "Buffer for messages to send. Static.";    */         
         END_VARIABLES;        
         OPERATIONS        
             constructor            :    C_FUNCTION    <OV_FNC_CONSTRUCTOR>;       
             destructor            :    C_FUNCTION    <OV_FNC_DESTRUCTOR>;     
             startup                :    C_FUNCTION    <OV_FNC_STARTUP>;       
             shutdown            :    C_FUNCTION    <OV_FNC_SHUTDOWN>;     
             getaccess            :    C_FUNCTION    <OV_FNC_GETACCESS>;       
             start                :    C_FUNCTION    <UA_FNC_STARTNL>;     
             listen                :    C_FUNCTION    <UA_FNC_NLGETWORK>;     
             stop                :    C_FUNCTION    <UA_FNC_STOPNL>;       
             delete                :    C_FUNCTION    <UA_FNC_DELETENL>;       
         END_OPERATIONS;
     END_CLASS;
   
   CLASS uaSimpleTicketAuthenticator    :    CLASS ksbase/TicketAuthenticator
    IS_INSTANTIABLE;
    COMMENT    =    "Authenticator for simple tickets transportes via upc ua";
    OPERATIONS
        constructor        :    C_FUNCTION    <OV_FNC_CONSTRUCTOR>;
         startup            :    C_FUNCTION    <OV_FNC_STARTUP>;
         shutdown        :    C_FUNCTION    <OV_FNC_SHUTDOWN>;
        /*
         *    These functions conform to the prototypes in a OV_TICKET_VTBL they are linked to the ticket itself to conform to ov-standards.
         *    The functions do NOT get a this-pointer. Hence TicketAuthenticators have to be Singletons!!! 
         */
         createticket    :    C_FUNCTION    <KSBASE_FNC_CREATETICKET>;
         deleteticket    :    C_FUNCTION    <KSBASE_FNC_DELETETICKET>;
        encodereply        :    C_FUNCTION    <KSBASE_FNC_ENCODEREPLY>;
        TicketGetaccess        :    C_FUNCTION    <KSBASE_FNC_GETACCESS>;
    END_OPERATIONS;    
    END_CLASS;
    
    CLASS nodeStoreFunctions    :    CLASS ov/object
    COMMENT    =    "Implementations of nodestore functions to build up the interface between stack an ov-data";
    OPERATIONS
    	ovNodeStoreInterface2New : C_FUNCTION <UA_FNC_OVNODESTOREINTERFACE2NEW>;
        ovNodeStoreInterface2Delete : C_FUNCTION <UA_FNC_OVNODESTOREINTERFACE2DELETE>;
        resolveNodeIdToPath : C_FUNCTION <UA_FNC_RESOLVENODEIDTOPATH>;
        resolveNodeIdToOvObject : C_FUNCTION <UA_FNC_RESOLVENDOEIDTOOVOBJECT>;
        getVtblPointerAndCheckAccess : C_FUNCTION <UA_FNC_GETVTBLPOINTERANDCHECKACCESS>;
    END_OPERATIONS;    
    END_CLASS;
       
    /*    
        Add associations and their documentation here.
        Association syntax is:
    */
    ASSOCIATION networkLayerToConnection : ONE_TO_MANY
        PARENT networkLayer   : CLASS opcua/ovNetworkLayer;
        CHILD  connection     : CLASS opcua/uaConnection;
    END_ASSOCIATION;
END_LIBRARY;

