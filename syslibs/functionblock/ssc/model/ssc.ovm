/*
*	Copyright (C) 2015
*	Chair of Process Control Engineering,
*	RWTH Aachen University
*	All rights reserved.
*
*	Redistribution and use in source and binary forms, with or without
*	modification, are permitted provided that the following conditions
*	are met:
*	1. Redistributions of source code must retain the above copyright
*	   notice, this list of conditions and the following disclaimer.
*	2. Redistributions in binary form must print or display the above
*	   copyright notice either during startup or must have a means for
*	   the user to view the copyright notice.
*	3. Redistributions in binary form must reproduce the above copyright
*	   notice, this list of conditions and the following disclaimer in
*		the documentation and/or other materials provided with the
*		distribution.
*	4. Neither the name of the Chair of Process Control Engineering nor
*		the name of the Aachen University of Technology may be used to
*		endorse or promote products derived from this software without
*		specific prior written permission.
*
*	THIS SOFTWARE IS PROVIDED BY THE CHAIR OF PROCESS CONTROL ENGINEERING
*	``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*	A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE CHAIR OF
*	PROCESS CONTROL ENGINEERING BE LIABLE FOR ANY DIRECT, INDIRECT,
*	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
*	OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
*	AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
*	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
*	WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*	POSSIBILITY OF SUCH DAMAGE.
*/

/***********************************************************************
*
*	File
*	-----
*	ssc.ovm - ACPLT Sequential Function Chart Library model
*
*	Authors:
*	--------
*	Yu				Liyong Yu <liyong.yu@plt.rwth.aachen.de>
*
*	CVS:
*	----
*	$Revision: 1.9 $
*	$Date: 2011-08-17 10:17:56 $
*
*	History:
*	--------
*	02-July-2011		Yu		V0.1
*		-	Creation.
*	12-December-2014		Jeromin		V1.0
*		-	general revision and simplification
*
***********************************************************************/

#include "fb.ovm"

LIBRARY ssc

	VERSION   = "1.0";
	AUTHOR    = "Liyong Yu, Holger Jeromin";
	COPYRIGHT = "2015 Lehrstuhl fuer Prozessleittechnik, RWTH Aachen";
	COMMENT   = "ACPLT Sequential State Chart Library";

	CLASS controlchart : CLASS fb/functionchart
		IS_INSTANTIABLE;
		COMMENT = "a Chart with ability to provide services";
		VARIABLES
			CMD			: STRING	HAS_SET_ACCESSOR 	FLAGS = "i" COMMENT = "Command input for services";
			ORDERLIST[]	: STRING	FLAGS = "i" COMMENT = "Command list for services";
			ORDEREXECUTOR[]	: STRING	FLAGS = "i" COMMENT = "Name of Order executor";
		END_VARIABLES;
			OPERATIONS
			typemethod		:	C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;

	CLASS SequentialControlChart : CLASS ssc/controlchart
		IS_INSTANTIABLE;
		COMMENT = "holds all steps and transitions and does the call logic";
		VARIABLES
			EN   			: UINT   						FLAGS = "i"	COMMENT = "enable execution: stop=0/start=1/break=2/reset=3" INITIALVALUE = 0;
			initStepName	: STRING	HAS_SET_ACCESSOR 	FLAGS = "i" COMMENT = "the name of the initialization step" INITIALVALUE = "INIT";
			endStepName	    : STRING	HAS_SET_ACCESSOR 	FLAGS = "i" COMMENT = "the name of the end step(s), multiple values possible via comma delimiter" INITIALVALUE = "END";
			woStPhase       : UINT							FLAGS = "n"	COMMENT = "working state phase: 1(entry, do), 2(transition, exit))" INITIALVALUE = 1;
			woStQualifier   : UINT							FLAGS = "n"	COMMENT = "working state qualifier: 1(entry), 2(do), 3 (exit))" INITIALVALUE = 1;
			workingState    : UINT							FLAGS = "o"	COMMENT = "working state: INIT: 0, START = 1, BREAK = 2, STOP = 3, TERMINATE = 4" INITIALVALUE = 0;
			woStText        : STRING    					FLAGS = "o"	COMMENT = "working state text: INIT/START/BREAK/STOP" INITIALVALUE = "INIT";
			error			: BOOL							FLAGS = "o"	COMMENT = "error";
			errorDetail		: STRING						FLAGS = "o"	COMMENT = "error details";
			activeStep		: STRING	IS_DERIVED	HAS_GET_ACCESSOR	FLAGS = "o"	COMMENT = "the active step name as a string";
		END_VARIABLES;
		PARTS
			actions			: CLASS ov/domain;
			transConds		: CLASS ov/domain;
			taskActiveStep	: CLASS fb/task;	//only the active step is linked here
			trans			: CLASS fb/task;
		END_PARTS;
		OPERATIONS
			constructor		:	C_FUNCTION	<OV_FNC_CONSTRUCTOR>;
			typemethod		:	C_FUNCTION <FB_FNC_TYPEMETHOD>;
			getaccess		:	C_FUNCTION	<OV_FNC_GETACCESS>;
			resetSsc		:	C_FUNCTION <SSC_FNC_RESETSSC>;
		END_OPERATIONS;
  END_CLASS;

  CLASS step : CLASS fb/functionblock
		IS_INSTANTIABLE;
		COMMENT = "step";
		VARIABLES
			internalRole	:UINT  		FLAGS = "n"	COMMENT = "internal role (0 start, 1 normal, 999 end)" INITIALVALUE = 1;
			X				:BOOL		FLAGS = "o"	COMMENT = "step flag according to IEC61131-3";
			T				:TIME_SPAN 	FLAGS = "o"	COMMENT = "elapsed time since initiation of a step according to IEC61131-3";
			phase    		:UINT  		FLAGS = "n"	COMMENT = "execution phase (1: entry & do actions. 2: transitions & exit actions)" INITIALVALUE = 1;
			qualifier  		:UINT  		FLAGS = "n"	COMMENT = "1: entry actions. 2: do actions. 3: exit actions" INITIALVALUE = 1;
			evTransTrigger  :BOOL		FLAGS = "o"	COMMENT = "Event: transition triggers";
			error			:BOOL		FLAGS = "o"	COMMENT = "error";
			errorDetail		:STRING		FLAGS = "o"	COMMENT = "error details";	
			startTime 		:TIME   	FLAGS = "n" COMMENT = "point of time in which the step is entered";
		END_VARIABLES;
	PARTS
      		entry 	: CLASS fb/task;
      		do  	: CLASS fb/task;
      		exit 	: CLASS fb/task;
    END_PARTS;
  	OPERATIONS
  			constructor		: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
  			typemethod 		: C_FUNCTION <FB_FNC_TYPEMETHOD>;
  			getaccess		: C_FUNCTION	<OV_FNC_GETACCESS>;
      		resetStep   	: C_FUNCTION <SSC_FNC_RESETSTEP>;
    END_OPERATIONS;
  END_CLASS;
  
  CLASS transition: CLASS fb/functionblock
	IS_INSTANTIABLE;
  	COMMENT = "transition";
    VARIABLES
      result 			: BOOL 		FLAGS = "i" COMMENT = "The result of the executed transition";
      error				: BOOL		FLAGS = "o"	COMMENT = "error";
      errorDetail		: STRING	FLAGS = "o"	COMMENT = "error details";
      visuallayoutPrev	: STRING	FLAGS = "p" COMMENT = "visual layout information for HMI";
      visuallayoutNext	: STRING	FLAGS = "p" COMMENT = "visual layout information for HMI";
    END_VARIABLES;
    OPERATIONS
    	constructor		: C_FUNCTION	<OV_FNC_CONSTRUCTOR>;
        typemethod 		: C_FUNCTION 	<FB_FNC_TYPEMETHOD>;
        getaccess		: C_FUNCTION	<OV_FNC_GETACCESS>;
    END_OPERATIONS;
  END_CLASS;
  
  /* Aktion ist abstrakt, und dient als Träger für eine Aktion.
  Eine Aktion kann ein FB sein, kann auch eine Zuweisung sein, z.B. "OUT=1". 
  Laut IEC 61131-3 ist ein Aktionsblock nur eine grafische Element. Er kann explizit implementiert werden, muss aber nicht. 
  In OV muss actionBlock als eine Klasse definiert werden. actionBlock veranschaulicht die Lokalisierung einer Aktion im ov-containment- und fb-task-Struktur.
  */
  CLASS actionBlock : CLASS fb/functionblock
  	COMMENT = "action block ";
    VARIABLES
      actionQualifier   : UINT      HAS_SET_ACCESSOR FLAGS = "p"	COMMENT = "action qualifier: 1(entry) 2 (do) 3 (exit)" INITIALVALUE = 1; /* todo remove later? */	
      error				: BOOL		FLAGS = "o"	COMMENT = "error";
	  errorDetail		: STRING	FLAGS = "o"	COMMENT = "error details";
    END_VARIABLES;
    OPERATIONS
      constructor		:	C_FUNCTION	<OV_FNC_CONSTRUCTOR>;
      getaccess			:	C_FUNCTION	<OV_FNC_GETACCESS>;
      checkAction		: C_FUNCTION <SSC_FNC_CHECKACTION> IS_ABSTRACT;
    END_OPERATIONS;
  END_CLASS;
   
  CLASS setVariable : CLASS ssc/actionBlock
	IS_INSTANTIABLE;
  	COMMENT = "action block for set variable action";
    VARIABLES
      variable			: STRING 		HAS_SET_ACCESSOR FLAGS = "p"	COMMENT = "The variable name (relative to the SequentialControlChart, its action domain or absolute path)";
      value				: ANY 			HAS_SET_ACCESSOR FLAGS = "i"	COMMENT = "The value to be set";
    END_VARIABLES;
    OPERATIONS
      typemethod 		: C_FUNCTION <FB_FNC_TYPEMETHOD>;
      checkAction		: C_FUNCTION <SSC_FNC_CHECKACTION>;
    END_OPERATIONS;
  END_CLASS;
  /* TODO: setVariable für Wertzuweisung auf einen internen FB-Eingang. */
  /* TODO: setVariable für variable A = variable B (Die jetzige setVariable ist nur variable A = value) */
  
   CLASS execute : CLASS ssc/actionBlock
	IS_INSTANTIABLE;
  	COMMENT = "action block calling SSC or FB action once";
    VARIABLES
      targetObject			: STRING 		HAS_SET_ACCESSOR FLAGS = "p"	COMMENT = "The object name (relative to the SequentialControlChart, its action domain or absolute path)";
    END_VARIABLES;
    OPERATIONS
      typemethod		:	C_FUNCTION <FB_FNC_TYPEMETHOD>;
      checkAction		: C_FUNCTION <SSC_FNC_CHECKACTION>;
      destructor		: C_FUNCTION <OV_FNC_DESTRUCTOR>;
    END_OPERATIONS;
  END_CLASS;
  
   CLASS sendCommand : CLASS ssc/actionBlock
	IS_INSTANTIABLE;
  	COMMENT = "action block sending a command";
    VARIABLES
      targetObject		: STRING 		HAS_SET_ACCESSOR FLAGS = "p"	COMMENT = "The object name (relative to the SequentialControlChart, its action domain or absolute path)";
      command			: STRING		FLAGS = "i"	COMMENT = "Command to send";
      parameter			: STRING		FLAGS = "i"	COMMENT = "optional parameters to send";
    END_VARIABLES;
    OPERATIONS
      typemethod		:	C_FUNCTION <FB_FNC_TYPEMETHOD>;
      checkAction		: C_FUNCTION <SSC_FNC_CHECKACTION>;
    END_OPERATIONS;
  END_CLASS;

  /* Associations */
  
  /* Connections from steps to next transitions. */
  ASSOCIATION nextTransitions : ONE_TO_MANY
    IS_LOCAL;
    PARENT prevStep  : CLASS ssc/step;
    CHILD  nextTrans : CLASS ssc/transition;
  END_ASSOCIATION;

  /* Connections from transitions to next steps. */
  ASSOCIATION previousTransitions : ONE_TO_MANY
    IS_LOCAL;
    PARENT nextStep  : CLASS ssc/step;
    CHILD  prevTrans : CLASS ssc/transition;
  END_ASSOCIATION; 

END_LIBRARY;
