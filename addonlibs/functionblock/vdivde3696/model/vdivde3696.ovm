/*
*	Copyright (C) 2004
*	Chair of Process Control Engineering,
*	Aachen University of Technology.
*	All rights reserved.
*
*	Redistribution and use in source and binary forms, with or without
*	modification, are permitted provided that the following conditions
*	are met:
*	1. Redistributions of source code must retain the above copyright
*	   notice, this list of conditions and the following disclaimer.
*	2. Redistributions in binary form must print or display the above
*	   copyright notice either during startup or must have a means for
*	   the user to view the copyright notice.
*	3. Redistributions in binary form must reproduce the above copyright
*	   notice, this list of conditions and the following disclaimer in
*		the documentation and/or other materials provided with the
*		distribution.
*	4. Neither the name of the Chair of Process Control Engineering nor
*		the name of the Aachen University of Technology may be used to
*		endorse or promote products derived from this software without
*		specific prior written permission.
*
*	THIS SOFTWARE IS PROVIDED BY THE CHAIR OF PROCESS CONTROL ENGINEERING
*	``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*	A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE CHAIR OF
*	PROCESS CONTROL ENGINEERING BE LIABLE FOR ANY DIRECT, INDIRECT,
*	INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*	BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
*	OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
*	AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
*	LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
*	WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*	POSSIBILITY OF SUCH DAMAGE.
*/
/***********************************************************************
*
*	File
*	-----
*	vdivde3696.ovm		Funktionsbaustein-Bibliothek VDI/VDE 3696
*							Implementierung der Standard-Funktionsbausteine der
*							VDI/VDE 3696
*
*	Autoren:
*	--------
*	AM						Ansgar Münnemann <Ansgar@plt.rwth-aachen.de>
*	AN						Alexander Neugebauer, LTSoft, Kerpen
*	FU						Felix Uecker
*	St						Stefan Schmitz <StefanS@plt.rwth-aachen.de>
*
*	Historie:
*	--------
*	28-Juli-1998		FU, AN
*		-	Erstellung
*
*	29-Januar-2003		AM
*		-	Überarbeitung, Defaultwerte
*
*	23-September-2004	St		V0.50
*		-	Einfügen der Ausschaltverzögerung tof1
*
*	21-Dezember-2004	St		V0.51
*		-	Logik im Baustein XOR gemäß IEC 1131-3
*		-	Basisklasse eingeführt
*
*	15-April-2005		St		V0.5.2
*		-	Erweiterung um ein Linux-Makefile
*		-	Umstellung der Versionierung
*
***********************************************************************/

#include "fb.ovm"

LIBRARY vdivde3696

	VERSION   = "V0.5.2 (15-Apr-2005)";
	AUTHOR    = "F. Uecker, A. Neugebauer, A. Münnemann, St. Schmitz";
	COPYRIGHT = "Copyright (C) 2005 Lehrstuhl fuer Prozessleittechnik, RWTH Aachen";
	COMMENT   = "Funktionsbausteine gemäß VDI/VDE 3696";
	
/***********************************************************************
	BaseClass - VDI/VDE 3696-Basisklasse
***********************************************************************/

	CLASS BaseClass : CLASS fb/functionblock
		COMMENT = "Basisklasse VDI/VDE 3696";
		VARIABLES
			/*	Inputs ****************************************************/
			en			:	BOOL			FLAGS = "i"
				COMMENT = "enable"
				INITIALVALUE = TRUE;
							
			/*	Internals *************************************************/
			counter	:	INT			HAS_GET_ACCESSOR IS_DERIVED FLAGS = "n"
				COMMENT = "cycle counter";
				
			/*	Outputs ***************************************************/
			eno		:  BOOL			HAS_GET_ACCESSOR IS_DERIVED FLAGS = "o"  
				COMMENT = "is enabled";
		END_VARIABLES;
	END_CLASS;
	
/***********************************************************************
	c - universeller PID-T1-Regler (universal controller)
***********************************************************************/

CLASS c : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		pv : SINGLE FLAGS = "i" COMMENT = "process value";
		spint : SINGLE FLAGS = "i" COMMENT = "setpoint internal";
		spext : SINGLE FLAGS = "i" COMMENT = "setpoint external";
		spexton : BOOL FLAGS = "i" COMMENT = "activate setpoint TRUE:ext FALSE:int";
		sptron : BOOL FLAGS = "i" COMMENT = "setpoint track mode";
		spll : SINGLE FLAGS = "i" COMMENT = "setpoint low limit";
		sphl : SINGLE FLAGS = "i" COMMENT = "setpoint high limit";
		spdron : BOOL FLAGS = "i" COMMENT = "setpoint down rate limit activator";
		spuron : BOOL FLAGS = "i" COMMENT = "setpoint up rate limit activator";
		spdr : SINGLE FLAGS = "i" UNIT = "1/s" COMMENT = "setpoint down rate limit";
		spur : SINGLE FLAGS = "i" UNIT = "1/s" COMMENT = "setpoint up rate limit";
		deadz : SINGLE FLAGS = "i" COMMENT = "dead zone for sp - pv";
		reverse : BOOL FLAGS = "i" COMMENT = "control direction true:rise/fall false:rise/rise";
		dmode : INT FLAGS = "i" COMMENT = "mode of differentiation";
		ireset : BOOL FLAGS = "i" COMMENT = "reset for integrator";
		pon : BOOL FLAGS = "i" COMMENT = "proportional factor activator";
		ion : BOOL FLAGS = "i" COMMENT = "integartor activator";
		don : BOOL FLAGS = "i" COMMENT = "derivative component activator";
		kp : SINGLE FLAGS = "i" COMMENT = "proportional factor";
		ti : SINGLE FLAGS = "i" UNIT = "s" COMMENT = "integrative time";
		td : SINGLE FLAGS = "i" UNIT = "s" COMMENT = "derivative time";
		t1totd : SINGLE FLAGS = "i" COMMENT = "t1/td  t1:time constant";
		mvmanon : BOOL FLAGS = "i" COMMENT = "mode of operation FALSE:auto TRUE:hand";
		mvmanfc : BOOL FLAGS = "i" COMMENT = "force to manual";
		mvexton : BOOL FLAGS = "i" COMMENT = "external control value activator";
		mvtron : BOOL FLAGS = "i" COMMENT = "track mode for external control value";
		mvman : SINGLE FLAGS = "i" COMMENT = "manual control value";
		mvext : SINGLE FLAGS = "i" COMMENT = "external control value";
		mvll : SINGLE FLAGS = "i" COMMENT = "control value low limit";
		mvhl : SINGLE FLAGS = "i" COMMENT = "control value high limit";
		mvdron : BOOL FLAGS = "i" COMMENT = "control value down rate limit activator";
		mvuron : BOOL FLAGS = "i" COMMENT = "control value up rate limit activator";
		mvdr : SINGLE FLAGS = "i" UNIT = "1/s" COMMENT = "control value down rate limit";
		mvur : SINGLE FLAGS = "i" UNIT = "1/s" COMMENT = "control value up rate limit";
		zon : BOOL FLAGS = "i" COMMENT = "disturbance variable feedforward activator";
		z : SINGLE FLAGS = "i" COMMENT = "disturbance variable feedforward";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		mv : SINGLE FLAGS = "o" COMMENT = "control value";
		e : SINGLE FLAGS = "o" COMMENT = "difference sp - pv";
		sp : SINGLE FLAGS = "o" COMMENT = "active setpoint";
		qspint : BOOL FLAGS = "o" COMMENT = "internal setpoint active";
		qmvman : BOOL FLAGS = "o" COMMENT = "hand mode active";
		qmvext : BOOL FLAGS = "o" COMMENT = "external control value active";
		qspll : BOOL FLAGS = "o" COMMENT = "setpoint low limit violation";
		qsphl : BOOL FLAGS = "o" COMMENT = "setpoint high limit violation";
		qmvll : BOOL FLAGS = "o" COMMENT = "control value low limit violation";
		qmvhl : BOOL FLAGS = "o" COMMENT = "control value high limit violation";
		eno : BOOL FLAGS = "o" COMMENT = "enabled ?";
		spold : SINGLE FLAGS = "n" COMMENT = "setpoint last cycle";
		pvold : SINGLE FLAGS = "n" COMMENT = "process value last cycle";
		edzold : SINGLE FLAGS = "n" COMMENT = "edz value last cycle";
		mvold : SINGLE FLAGS = "n" COMMENT = "control value last cycle";
		mviold : SINGLE FLAGS = "n" COMMENT = "intergative component last cycle";
		mvpido : SINGLE FLAGS = "n" COMMENT = "last cycle mv_pid value";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS abs : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input value";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v : SINGLE FLAGS = "o" COMMENT = "output value";
		eno : BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS acos : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input value";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v : SINGLE FLAGS = "o" COMMENT = "output value";
		eno : BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS add : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u1 : SINGLE FLAGS = "i" COMMENT = "input 1";
		u2 : SINGLE FLAGS = "i" COMMENT = "input 2";
		u3 : SINGLE FLAGS = "i" COMMENT = "input 3";
		u4 : SINGLE FLAGS = "i" COMMENT = "input 4";
		u5 : SINGLE FLAGS = "i" COMMENT = "input 5";
		u6 : SINGLE FLAGS = "i" COMMENT = "input 6";
		u7 : SINGLE FLAGS = "i" COMMENT = "input 7";
		u8 : SINGLE FLAGS = "i" COMMENT = "input 8";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v : SINGLE FLAGS = "o" COMMENT = "output value";
		eno : BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS am : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		i : BOOL FLAGS = "i" COMMENT = "binary signal to monitor";
		aon : BOOL FLAGS = "i" COMMENT = "alarm or message active";
		amode : STRING FLAGS = "p" COMMENT = "mode of operation";
		aprio : INT FLAGS = "i" COMMENT = "priority of alarm/message";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		q : BOOL FLAGS = "o" COMMENT = "alarm/message output";
		qa : BOOL FLAGS = "o" COMMENT = "alarm or message";
		eno : BOOL FLAGS = "o" COMMENT = "enabled ?";
		iold :	BOOL FLAGS = "n" COMMENT = "last cycle value of i";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS and : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		i1 : BOOL FLAGS = "i" COMMENT = "input 1";
		i2 : BOOL FLAGS = "i" COMMENT = "input 2";
		i3 : BOOL FLAGS = "i" COMMENT = "input 3";
		i4 : BOOL FLAGS = "i" COMMENT = "input 4";
		i5 : BOOL FLAGS = "i" COMMENT = "input 5";
		i6 : BOOL FLAGS = "i" COMMENT = "input 6";
		i7 : BOOL FLAGS = "i" COMMENT = "input 7";
		i8 : BOOL FLAGS = "i" COMMENT = "input 8";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		q : BOOL FLAGS = "o" COMMENT = "output value";
		eno : BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS asin : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input value";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v : SINGLE FLAGS = "o" COMMENT = "output value";
		eno : BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS atan : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input value";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v : SINGLE FLAGS = "o" COMMENT = "output value";
		eno : BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS aver : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input";
		ta : SINGLE FLAGS = "i" UNIT = "s" COMMENT = "size of moving window";
		mxtatotc : INT FLAGS = "p" COMMENT = "maximum ta/t_cycle";
		averon : BOOL FLAGS = "i" COMMENT = "average building activator";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v : SINGLE FLAGS = "o" COMMENT = "output";
		qon : BOOL FLAGS = "o" COMMENT = "average active";
		eno : BOOL FLAGS = "o" COMMENT = "enabled ?";
		averono : BOOL FLAGS = "n" COMMENT = "last cycle value of averon";
		ringbuffer[10] : SINGLE FLAGS = "n" COMMENT = "stores up to 10 cycle values";
		k : INT FLAGS = "n" COMMENT = "ringbuffer index";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS bitn : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		i1 : BOOL FLAGS = "i" COMMENT = "input 1";
		i2 : BOOL FLAGS = "i" COMMENT = "input 2";
		i3 : BOOL FLAGS = "i" COMMENT = "input 3";
		i4 : BOOL FLAGS = "i" COMMENT = "input 4";
		i5 : BOOL FLAGS = "i" COMMENT = "input 5";
		i6 : BOOL FLAGS = "i" COMMENT = "input 6";
		i7 : BOOL FLAGS = "i" COMMENT = "input 7";
		i8 : BOOL FLAGS = "i" COMMENT = "input 8";
		u0 : SINGLE FLAGS = "i" COMMENT = "value 0";
		u1 : SINGLE FLAGS = "i" COMMENT = "value 1";
		u2 : SINGLE FLAGS = "i" COMMENT = "value 2";
		u3 : SINGLE FLAGS = "i" COMMENT = "value 3";
		u4 : SINGLE FLAGS = "i" COMMENT = "value 4";
		u5 : SINGLE FLAGS = "i" COMMENT = "value 5";
		u6 : SINGLE FLAGS = "i" COMMENT = "value 6";
		u7 : SINGLE FLAGS = "i" COMMENT = "value 7";
		u8 : SINGLE FLAGS = "i" COMMENT = "value 8";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v : SINGLE FLAGS = "o" COMMENT = "output value";
		eno : BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS cos : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input value";
		en :  BOOL FLAGS = "i" COMMENT = "enable";
		v : SINGLE FLAGS = "o" COMMENT = "output value";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS cs : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		pv : SINGLE FLAGS = "i" COMMENT = "process value";
		spint : SINGLE FLAGS = "i" COMMENT = "setpoint internal";
		spext : SINGLE FLAGS = "i" COMMENT = "setpoint external";
		spexton : BOOL FLAGS = "i" COMMENT = "activate setpoint TRUE:ext FALSE:int";
		reverse : BOOL FLAGS = "i" COMMENT = "control direction TRUE:rise/fall FALSE:rise/rise";
		dmode : INT FLAGS = "i" COMMENT = "signal to differentiate";
		ion : BOOL FLAGS = "i" COMMENT = "integrator active";
		kp : SINGLE FLAGS = "i" COMMENT = "proportional factor";
		ti : SINGLE FLAGS = "i" UNIT = "s" COMMENT = "integrative time";
		td : SINGLE FLAGS = "i" UNIT = "s" COMMENT = "derivative time";
		t1totd : SINGLE FLAGS = "i" COMMENT = "t1/td  t1:time constant";
		mvmanon : BOOL FLAGS = "i" COMMENT = "mode of operation false:auto true:hand";
		mvman : SINGLE FLAGS = "i" COMMENT = "hand control value";
		mvll : SINGLE FLAGS = "i" COMMENT = "low limit for control value";
		mvhl : SINGLE FLAGS = "i" COMMENT = "high limit for control value";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		mv : SINGLE FLAGS = "o" COMMENT = "current control value";
		e : SINGLE FLAGS = "o" COMMENT = "difference sp - pv";
		sp : SINGLE FLAGS = "o" COMMENT = "current setpoint";
		qspint : SINGLE FLAGS = "o" COMMENT = "internal setpoint active";
		eno : BOOL FLAGS = "o" COMMENT = "enabled ?";
		spold : SINGLE FLAGS = "n" COMMENT = "last cycle value of sp";
		pvold : SINGLE FLAGS = "n" COMMENT = "last cycle value of pv";
		eold :	SINGLE FLAGS = "n" COMMENT = "last cycle value of e";
		mvold : SINGLE FLAGS = "n" COMMENT = "last cycle value of mv";
		mviold : SINGLE FLAGS = "n" COMMENT = "last cycle value of MV_I";
		mvpidold : SINGLE FLAGS = "n" COMMENT = "last cycle value of MV_PID";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS ct : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		i : BOOL FLAGS = "i" COMMENT = "binary input";
		v0 : SINGLE FLAGS = "i" COMMENT = "output after reset";
		ll : SINGLE FLAGS = "i" COMMENT = "low-limiting control for v";
		hl : SINGLE FLAGS = "i" COMMENT = "high limiting control for v";
		lls : SINGLE FLAGS = "i" COMMENT = "low limit for v";
		hhs : SINGLE FLAGS = "i" COMMENT = "high limit for v";
		deltals : SINGLE FLAGS = "i" COMMENT = "difference to pre-low-limit ls";
		deltahs : SINGLE FLAGS = "i" COMMENT = " difference to pre-high-limit hs";
		incr : SINGLE FLAGS = "i" COMMENT = "increment per impuls";
		digits : INT FLAGS = "p" COMMENT = "wanted number of decimal places";
		reset : BOOL FLAGS = "i" COMMENT = "reset v to v0";
		hold : BOOL FLAGS = "i" COMMENT = "hold mode -> v = const.";
		down : BOOL FLAGS = "i" COMMENT = "TRUE => count down / FALSE => count up";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v : SINGLE FLAGS = "o" COMMENT = "output";
		qv0 : BOOL FLAGS = "o" COMMENT = "v is v0";
		qll : BOOL FLAGS = "o" COMMENT = "v is ll";
		qhl : BOOL FLAGS = "o" COMMENT = "v is hl";
		qlls : BOOL FLAGS = "o" COMMENT = "v is less than lls";
		qls : BOOL FLAGS = "o" COMMENT = "v is less than ls";
		qhs : BOOL FLAGS = "o" COMMENT = "v is greater than hs";
		qhhs : BOOL FLAGS = "o" COMMENT = "v is greater than hhs";
		eno : BOOL FLAGS = "o" COMMENT = "enabled ?";
		iold :	BOOL FLAGS = "n" COMMENT = "last cycle value of i";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS deadt : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input";
		td : SINGLE FLAGS = "i" UNIT = "s" COMMENT = " dead time (s)";
		mxtdtotc : INT FLAGS = "p" COMMENT = "maximum td/t_cycle";
		deadton : BOOL FLAGS = "i" COMMENT = "dead time activator";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output";
		qon :  BOOL FLAGS = "o" COMMENT = "dead time active ?";
		eno :  BOOL FLAGS = "o" COMMENT = " enabled ?";
		deadtono : BOOL FLAGS = "n" COMMENT = "last cycle value of deadton";
		ringbuffer[10] : SINGLE FLAGS = "n" COMMENT = "stores input values";
		k : INT FLAGS = "n" COMMENT = "bufferindex";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS demuxb : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		k : INT FLAGS = "i" COMMENT = "channel number";
		i : BOOL FLAGS = "i" COMMENT = "output value for channel Qk";
		i0 : BOOL FLAGS = "i" COMMENT = "input 0";
		i1 : BOOL FLAGS = "i" COMMENT = "input 1";
		i2 : BOOL FLAGS = "i" COMMENT = "input 2";
		i3 : BOOL FLAGS = "i" COMMENT = "input 3";
		i4 : BOOL FLAGS = "i" COMMENT = "input 4";
		i5 : BOOL FLAGS = "i" COMMENT = "input 5";
		i6 : BOOL FLAGS = "i" COMMENT = "input 6";
		i7 : BOOL FLAGS = "i" COMMENT = "input 7";
		i8 : BOOL FLAGS = "i" COMMENT = "input 8";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		q0 :  BOOL FLAGS = "o" COMMENT = "output 0";
		q1 :  BOOL FLAGS = "o" COMMENT = "output 1";
		q2 :  BOOL FLAGS = "o" COMMENT = "output 2";
		q3 :  BOOL FLAGS = "o" COMMENT = "output 3";
		q4 :  BOOL FLAGS = "o" COMMENT = "output 4";
		q5 :  BOOL FLAGS = "o" COMMENT = "output 5";
		q6 :  BOOL FLAGS = "o" COMMENT = "output 6";
		q7 :  BOOL FLAGS = "o" COMMENT = "output 7";
		q8 :  BOOL FLAGS = "o" COMMENT = "output 8";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS demuxn : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		k : INT FLAGS = "i" COMMENT = "channel number";
		u : SINGLE FLAGS = "i" COMMENT = "output value for channel Vk";
		u0 : SINGLE FLAGS = "i" COMMENT = "input 0";
		u1 : SINGLE FLAGS = "i" COMMENT = "input 1";
		u2 : SINGLE FLAGS = "i" COMMENT = "input 2";
		u3 : SINGLE FLAGS = "i" COMMENT = "input 3";
		u4 : SINGLE FLAGS = "i" COMMENT = "input 4";
		u5 : SINGLE FLAGS = "i" COMMENT = "input 5";
		u6 : SINGLE FLAGS = "i" COMMENT = "input 6";
		u7 : SINGLE FLAGS = "i" COMMENT = "input 7";
		u8 : SINGLE FLAGS = "i" COMMENT = "input 8";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v0 :  SINGLE FLAGS = "o" COMMENT = "output 0";
		v1 :  SINGLE FLAGS = "o" COMMENT = "output 1";
		v2 :  SINGLE FLAGS = "o" COMMENT = "output 2";
		v3 :  SINGLE FLAGS = "o" COMMENT = "output 3";
		v4 :  SINGLE FLAGS = "o" COMMENT = "output 4";
		v5 :  SINGLE FLAGS = "o" COMMENT = "output 5";
		v6 :  SINGLE FLAGS = "o" COMMENT = "output 6";
		v7 :  SINGLE FLAGS = "o" COMMENT = "output 7";
		v8 :  SINGLE FLAGS = "o" COMMENT = "output 8";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS dif : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input";
		td : SINGLE FLAGS = "i" COMMENT = "derivative action coefficient";
		t1totd : SINGLE FLAGS = "i" COMMENT = "t1/td : t1 = time constant";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		vold :	SINGLE FLAGS = "n" COMMENT = "last cycle value of v";
		uold :	SINGLE FLAGS = "n" COMMENT = "last cycle value of u";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS div : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u1 : SINGLE FLAGS = "i" COMMENT = "dividend";
		u2 : SINGLE FLAGS = "i" COMMENT = "divisor";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output value";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS eq : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u1 : SINGLE FLAGS = "i" COMMENT = "input 1";
		u2 : SINGLE FLAGS = "i" COMMENT = "input 2";
		tol : SINGLE FLAGS = "i" COMMENT = "tolerance zone";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		q :  BOOL FLAGS = "o" COMMENT = "equality signal";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS exp : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input value";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output value";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS expt : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u1 : SINGLE FLAGS = "i" COMMENT = "base factor";
		u2 : SINGLE FLAGS = "i" COMMENT = "exponent";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output value";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS fio : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input";
		kp : SINGLE FLAGS = "i" COMMENT = "proportional factor";
		t1 : SINGLE FLAGS = "i" UNIT = "s" COMMENT = "time constant";
		td : SINGLE FLAGS = "i" UNIT = "s" COMMENT = "derivative time";
		v0 : SINGLE FLAGS = "i" COMMENT = "output value after reset";
		reset : BOOL FLAGS = "i" COMMENT = "reset to v0";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		vold :	SINGLE FLAGS = "n" COMMENT = "last cycle value of v";
		uold :	SINGLE FLAGS = "n" COMMENT = "last cycle value of u";
		counter : INT FLAGS = "n" COMMENT = "cyle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS ftrig : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		i : BOOL FLAGS = "i" COMMENT = "input signal";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		q :  BOOL FLAGS = "o" COMMENT = "ouput value";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		iold :	BOOL FLAGS = "n" COMMENT = "last cycle value of i";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS ge : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u1 : SINGLE FLAGS = "i" COMMENT = "input 1";
		u2 : SINGLE FLAGS = "i" COMMENT = "input 2";
		tol : SINGLE FLAGS = "i" COMMENT = "tolerance for equality";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		q :  BOOL FLAGS = "o" COMMENT = "binary result of comparison";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS gt : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u1 : SINGLE FLAGS = "i" COMMENT = "input 1";
		u2 : SINGLE FLAGS = "i" COMMENT = "input 2";
		tol : SINGLE FLAGS = "i" COMMENT = "tolerance";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		q :  BOOL FLAGS = "o" COMMENT = "binary result of comparison";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS hb : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		qman : BOOL FLAGS = "i" COMMENT = "hand control value";
		qexton : BOOL FLAGS = "i" COMMENT = "choice hand or external value";
		qext : BOOL FLAGS = "i" COMMENT = "external value";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		q :  BOOL FLAGS = "o" COMMENT = "control value output";
		qqext :  BOOL FLAGS = "o" COMMENT = "external value choosen";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS hn : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		vman : SINGLE FLAGS = "i" COMMENT = "hand control value";
		vexton : BOOL FLAGS = "i" COMMENT = "choice external/hand control";
		vext : SINGLE FLAGS = "i" COMMENT = "external control value";
		llon : BOOL FLAGS = "i" COMMENT = "low limit activator";
		hlon : BOOL FLAGS = "i" COMMENT = "high limit activator";
		ll : SINGLE FLAGS = "i" COMMENT = "low limit";
		hl : SINGLE FLAGS = "i" COMMENT = "high limit";
		dron : BOOL FLAGS = "i" COMMENT = "activate down rate limiter";
		uron : BOOL FLAGS = "i" COMMENT = "activate up raqte limiter";
		dr : SINGLE FLAGS = "i" UNIT = "1/s" COMMENT = "down rate limit";
		ur : SINGLE FLAGS = "i" UNIT = "1/s" COMMENT = "up rate limit";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "current value";
		qvext :  BOOL FLAGS = "o" COMMENT = "external value active";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		vold :	SINGLE FLAGS = "n" COMMENT = "last cycle value of v";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS integr : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input";
		thron : BOOL FLAGS = "i" COMMENT = "threshold activator";
		thr : SINGLE FLAGS = "i" COMMENT = "treshold";
		v0 : SINGLE FLAGS = "i" COMMENT = "ouput value after reset";
		ll : SINGLE FLAGS = "i" COMMENT = "low-limiting control for v";
		hl : SINGLE FLAGS = "i" COMMENT = "high limiting control for v";
		lls : SINGLE FLAGS = "i" COMMENT = "low limit for v";
		hhs : SINGLE FLAGS = "i" COMMENT = "high limit for v";
		deltals : SINGLE FLAGS = "i" COMMENT = "difference to pre-low-limit ls";
		deltahs : SINGLE FLAGS = "i" COMMENT = "difference to pre-high-limit hs";
		ki : SINGLE FLAGS = "i" COMMENT = "integral action coefficient";
		digits : INT FLAGS = "p" COMMENT = "wanted number of decimal places";
		reset : BOOL FLAGS = "i" COMMENT = "reset to v0";
		hold : BOOL FLAGS = "i" COMMENT = "hold mode -> v = const.";
		track : BOOL FLAGS = "i" COMMENT = "track mode -> v = u";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output";
		qv0 :  BOOL FLAGS = "o" COMMENT = "v is v0";
		qll :  BOOL FLAGS = "o" COMMENT = "v is ll";
		qhl :  BOOL FLAGS = "o" COMMENT = "v is hl";
		qlls :  BOOL FLAGS = "o" COMMENT = "v is less than lls";
		qls :  BOOL FLAGS = "o" COMMENT = "v is less than ls";
		qhs :  BOOL FLAGS = "o" COMMENT = "v is greater than hs";
		qhhs :  BOOL FLAGS = "o" COMMENT = "v is greater than hhs";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		vold :	SINGLE FLAGS = "n" COMMENT = "last cycle value of v";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS le : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u1 : SINGLE FLAGS = "i" COMMENT = "input 1";
		u2 : SINGLE FLAGS = "i" COMMENT = "input 2";
		tol : SINGLE FLAGS = "i" COMMENT = "tolerance for eqaulity";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		q :  BOOL FLAGS = "o" COMMENT = "binary result of comparison";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS limit : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input value";
		ll : SINGLE FLAGS = "i" COMMENT = "low limit";
		hl : SINGLE FLAGS = "i" COMMENT = "high limit";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output value";
		qll :  BOOL FLAGS = "o" COMMENT = "low limitation active";
		qhl :  BOOL FLAGS = "o" COMMENT = "high limitation active";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS ln : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input value";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output value";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS log : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input value";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output value";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS lt : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u1 : SINGLE FLAGS = "i" COMMENT = "input 1";
		u2 : SINGLE FLAGS = "i" COMMENT = "input 2";
		tol : SINGLE FLAGS = "i" COMMENT = "tolerance";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		q :  BOOL FLAGS = "o" COMMENT = "binary result of comparison";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS max : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u1 : SINGLE FLAGS = "i" COMMENT = "input 1";
		u2 : SINGLE FLAGS = "i" COMMENT = "input 2";
		u3 : SINGLE FLAGS = "i" COMMENT = "input 3";
		u4 : SINGLE FLAGS = "i" COMMENT = "input 4";
		u5 : SINGLE FLAGS = "i" COMMENT = "input 5";
		u6 : SINGLE FLAGS = "i" COMMENT = "input 6";
		u7 : SINGLE FLAGS = "i" COMMENT = "input 7";
		u8 : SINGLE FLAGS = "i" COMMENT = "input 8";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "ouput";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS min : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u1 : SINGLE FLAGS = "i" COMMENT = "input 1";
		u2 : SINGLE FLAGS = "i" COMMENT = "input 2";
		u3 : SINGLE FLAGS = "i" COMMENT = "input 3";
		u4 : SINGLE FLAGS = "i" COMMENT = "input 4";
		u5 : SINGLE FLAGS = "i" COMMENT = "input 5";
		u6 : SINGLE FLAGS = "i" COMMENT = "input 6";
		u7 : SINGLE FLAGS = "i" COMMENT = "input 7";
		u8 : SINGLE FLAGS = "i" COMMENT = "input 8";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS mod : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u1 : SINGLE FLAGS = "i" COMMENT = "dividend";
		u2 : SINGLE FLAGS = "i" COMMENT = "divisor";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output value";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS mul : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u1 : SINGLE FLAGS = "i" COMMENT = "input 1";
		u2 : SINGLE FLAGS = "i" COMMENT = "input 2";
		u3 : SINGLE FLAGS = "i" COMMENT = "input 3";
		u4 : SINGLE FLAGS = "i" COMMENT = "input 4";
		u5 : SINGLE FLAGS = "i" COMMENT = "input 5";
		u6 : SINGLE FLAGS = "i" COMMENT = "input 6";
		u7 : SINGLE FLAGS = "i" COMMENT = "input 7";
		u8 : SINGLE FLAGS = "i" COMMENT = "input 8";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor: C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS muxb : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		k : INT FLAGS = "i" COMMENT = "channel number";
		i0 : BOOL FLAGS = "i" COMMENT = "input 0";
		i1 : BOOL FLAGS = "i" COMMENT = "input 1";
		i2 : BOOL FLAGS = "i" COMMENT = "input 2";
		i3 : BOOL FLAGS = "i" COMMENT = "input 3";
		i4 : BOOL FLAGS = "i" COMMENT = "input 4";
		i5 : BOOL FLAGS = "i" COMMENT = "input 5";
		i6 : BOOL FLAGS = "i" COMMENT = "input 6";
		i7 : BOOL FLAGS = "i" COMMENT = "input 7";
		i8 : BOOL FLAGS = "i" COMMENT = "input 8";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		q :  BOOL FLAGS = "o" COMMENT = "output";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS muxn : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		k : INT FLAGS = "i" COMMENT = "channel number";
		u0 : SINGLE FLAGS = "i" COMMENT = "input 0";
		u1 : SINGLE FLAGS = "i" COMMENT = "input 1";
		u2 : SINGLE FLAGS = "i" COMMENT = "input 2";
		u3 : SINGLE FLAGS = "i" COMMENT = "input 3";
		u4 : SINGLE FLAGS = "i" COMMENT = "input 4";
		u5 : SINGLE FLAGS = "i" COMMENT = "input 5";
		u6 : SINGLE FLAGS = "i" COMMENT = "input 6";
		u7 : SINGLE FLAGS = "i" COMMENT = "input 7";
		u8 : SINGLE FLAGS = "i" COMMENT = "input 8";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS ne : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u1 : SINGLE FLAGS = "i" COMMENT = "input 1";
		u2 : SINGLE FLAGS = "i" COMMENT = "input 2";
		tol : SINGLE FLAGS = "i" COMMENT = "tolerance";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		q :  BOOL FLAGS = "o" COMMENT = "binary result of comparison";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS nonlin : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u1 : SINGLE FLAGS = "i" COMMENT = "u-value checkpoint 1";
		u2 : SINGLE FLAGS = "i" COMMENT = "u-value ckeckpoint 2";
		u3 : SINGLE FLAGS = "i" COMMENT = "u-value ckeckpoint 3";
		u4 : SINGLE FLAGS = "i" COMMENT = "u-value ckeckpoint 4";
		u5 : SINGLE FLAGS = "i" COMMENT = "u-value ckeckpoint 5";
		u6 : SINGLE FLAGS = "i" COMMENT = "u-value ckeckpoint 6";
		u7 : SINGLE FLAGS = "i" COMMENT = "u-value ckeckpoint 7";
		u8 : SINGLE FLAGS = "i" COMMENT = "u-value ckeckpoint 8";
		u9 : SINGLE FLAGS = "i" COMMENT = "u-value ckeckpoint 9";
		u10 : SINGLE FLAGS = "i" COMMENT = "u-value ckeckpoint 10";
		v1 : SINGLE FLAGS = "i" COMMENT = "v-value checkpoint 1";
		v2 : SINGLE FLAGS = "i" COMMENT = "v-value checkpoint 2";
		v3 : SINGLE FLAGS = "i" COMMENT = "v-value checkpoint 3";
		v4 : SINGLE FLAGS = "i" COMMENT = "v-value checkpoint 4";
		v5 : SINGLE FLAGS = "i" COMMENT = "v-value checkpoint 5";
		v6 : SINGLE FLAGS = "i" COMMENT = "v-value checkpoint 6";
		v7 : SINGLE FLAGS = "i" COMMENT = "v-value checkpoint 7";
		v8 : SINGLE FLAGS = "i" COMMENT = "v-value checkpoint 8";
		v9 : SINGLE FLAGS = "i" COMMENT = "v-value checkpoint 9";
		v10 : SINGLE FLAGS = "i" COMMENT = "v-value checkpoint 10";
		n : INT FLAGS = "p" COMMENT = "number of relevant checkpoints";
		u : SINGLE FLAGS = "i" COMMENT = "input";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS not : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		i : BOOL FLAGS = "i" COMMENT = "input";
		q : BOOL FLAGS = "o" COMMENT = "output";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS or : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		i1 : BOOL FLAGS = "i" COMMENT = "input 1";
		i2 : BOOL FLAGS = "i" COMMENT = "input 2";
		i3 : BOOL FLAGS = "i" COMMENT = "input 3";
		i4 : BOOL FLAGS = "i" COMMENT = "input 4";
		i5 : BOOL FLAGS = "i" COMMENT = "input 5";
		i6 : BOOL FLAGS = "i" COMMENT = "input 6";
		i7 : BOOL FLAGS = "i" COMMENT = "input 7";
		i8 : BOOL FLAGS = "i" COMMENT = "input 8";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		q :  BOOL FLAGS = "o" COMMENT = "ouput";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS rsff : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		s : BOOL FLAGS = "i" COMMENT = "set-input";
		r1 : BOOL FLAGS = "i" COMMENT = "reset-input with priority";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		q :  BOOL FLAGS = "o" COMMENT = "output";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS rtrig : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		i : BOOL FLAGS = "i" COMMENT = "input";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		q :  BOOL FLAGS = "o" COMMENT = "output";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		iold :	BOOL FLAGS = "n" COMMENT = "last cycle value of i";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS sam : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		pv : SINGLE FLAGS = "i" COMMENT = "input signal";
		pvref : SINGLE FLAGS = "i" COMMENT = "reference signal";
		pvmode : INT FLAGS = "i" COMMENT = "compare mode";
		low : BOOL FLAGS = "i" COMMENT = "kind of limit";
		s : SINGLE FLAGS = "i" COMMENT = "limit";
		smin : SINGLE FLAGS = "i" COMMENT = "low limit for limit s";
		smax : SINGLE FLAGS = "i" COMMENT = "high limit for limit s";
		shys : SINGLE FLAGS = "i" COMMENT = "differential gap";
		aon : SINGLE FLAGS = "i" COMMENT = "alarm/message on";
		amode : STRING FLAGS = "p" COMMENT = "mode of alarm/message";
		aprio : SINGLE FLAGS = "i" COMMENT = "priority of alarm/message";
		en : SINGLE FLAGS = "i" COMMENT = "enable";
		pvmod :  SINGLE FLAGS = "o" COMMENT = "limit checked value";
		qs :  BOOL FLAGS = "o" COMMENT = "limit s violated";
		v :  BOOL FLAGS = "o" COMMENT = "alarm/message";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		qsold : BOOL FLAGS = "n" COMMENT = "last cycle value of qs";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS scal : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input";
		scal : SINGLE FLAGS = "i" COMMENT = "scaling factor";
		offs : SINGLE FLAGS = "i" COMMENT = "offset";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS selb : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		i : BOOL FLAGS = "i" COMMENT = "binary selection input";
		i0 : BOOL FLAGS = "i" COMMENT = "output if i is FALSE";
		i1 : BOOL FLAGS = "i" COMMENT = "output if i is TRUE";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		q :  BOOL FLAGS = "o" COMMENT = "output";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS seln : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		i : BOOL FLAGS = "i" COMMENT = "binary selection input";
		u0 : SINGLE FLAGS = "i" COMMENT = "output if i is FALSE";
		u1 : SINGLE FLAGS = "i" COMMENT = "output if i is TRUE";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "ouput";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS seo : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input";
		kp : SINGLE FLAGS = "i" COMMENT = "proportional action coefficient";
		omega0 : SINGLE FLAGS = "i" UNIT = "1/s" COMMENT = "characteristic angular frequency";
		theta : SINGLE FLAGS = "i" COMMENT = "attenuation ratio";
		b1 : SINGLE FLAGS = "i" UNIT = "s" COMMENT = "derivartive time";
		b2 : SINGLE FLAGS = "i" UNIT = "s²" COMMENT = "count coefficient";
		v0 : SINGLE FLAGS = "i" COMMENT = "reset value of v(0)";
		vm1 : SINGLE FLAGS = "i" COMMENT = "reset value of v(-1)";
		reset : BOOL FLAGS = "i" COMMENT = "reset to v0,vm1";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		vold1 : SINGLE FLAGS = "n" COMMENT = "last cycle value of v";
		vold2 : SINGLE FLAGS = "n" COMMENT = "pre-last cycle value of v";
		uold1 : SINGLE FLAGS = "n" COMMENT = "last cycle value of u";
		uold2 : SINGLE FLAGS = "n" COMMENT = "pre-last cycle value of u";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS sin : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "ouput";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS sqrt : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS srff : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		s1 : BOOL FLAGS = "i" COMMENT = "set-input with priority";
		r : BOOL FLAGS = "i" COMMENT = "reset-input";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		q :  BOOL FLAGS = "o" COMMENT = "output";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS sub : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u1 : SINGLE FLAGS = "i" COMMENT = "input 1";
		u2 : SINGLE FLAGS = "i" COMMENT = "input 2";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS tan : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		u : SINGLE FLAGS = "i" COMMENT = "input";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		v :  SINGLE FLAGS = "o" COMMENT = "output";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

/***********************************************************************
	tof1 - Ausschaltverzögerung (off delay)
***********************************************************************/

	CLASS tof1 : CLASS fb/functionblock
		IS_INSTANTIABLE;
		COMMENT = "Ausschaltverzögerung (off delay)";
		VARIABLES
			/*	Inputs ****************************************************/
			i			:	BOOL			FLAGS = "i"
				COMMENT = "input signal";
			time		:	SINGLE		FLAGS = "i"	UNIT = "s"
				COMMENT = "delay time";
			en			:	BOOL			FLAGS = "i"
				COMMENT = "enable"
				INITIALVALUE = TRUE;
							
			/*	Internals *************************************************/
			counter	:	INT			FLAGS = "n"
				COMMENT = "cycle counter";
				
			/*	Outputs ***************************************************/				
			q			:	BOOL			FLAGS = "o"
				COMMENT = "output signal";
			etime		:  SINGLE		FLAGS = "o"	UNIT = "s"
				COMMENT = "elapsed time";
			eno		:  BOOL			FLAGS = "o"
				COMMENT = "enabled ?";
		END_VARIABLES;
		OPERATIONS
			typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;

CLASS ton1 : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
		i : BOOL FLAGS = "i" COMMENT = "input signal";
		time : SINGLE FLAGS = "i" UNIT = "s" COMMENT = "delay time";
		en : BOOL FLAGS = "i" COMMENT = "enable";
		q :  BOOL FLAGS = "o" COMMENT = "output signal";
		etime :  SINGLE FLAGS = "o" UNIT = "s" COMMENT = "elapsed time";
		eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
		counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

CLASS tp1 : CLASS fb/functionblock
	IS_INSTANTIABLE;
	VARIABLES
			i : BOOL FLAGS = "i" COMMENT = "input signal";
			time : SINGLE FLAGS = "i" UNIT = "s" COMMENT = "time span";
			en : BOOL FLAGS = "i" COMMENT = "enable";
			q :  BOOL FLAGS = "o" COMMENT = "output signal";
			etime :  SINGLE FLAGS = "o" UNIT = "s" COMMENT = "elapsed time";
			eno :  BOOL FLAGS = "o" COMMENT = "enabled ?";
			iold :	SINGLE FLAGS = "n" COMMENT = "last cycle value of i";
			counter : INT FLAGS = "n" COMMENT = "cycle counter";
	END_VARIABLES;
	OPERATIONS
		constructor : C_FUNCTION <OV_FNC_CONSTRUCTOR>;
		typemethod : C_FUNCTION <FB_FNC_TYPEMETHOD>;
	END_OPERATIONS;
END_CLASS;

/***********************************************************************
	xor - exklusive ODER-Verknüpfung (Boolean exclusive OR)
***********************************************************************/

	CLASS xor : CLASS vdivde3696/BaseClass
		IS_INSTANTIABLE;
		VARIABLES
			/*	Inputs ****************************************************/
			i1			:	BOOL			FLAGS = "i"
				COMMENT = "input 1";
			i2			:	BOOL			FLAGS = "i"
				COMMENT = "input 2";
			i3			:	BOOL			FLAGS = "i"
				COMMENT = "input 3";
			i4			:	BOOL			FLAGS = "i"
				COMMENT = "input 4";
			i5			:	BOOL			FLAGS = "i"
				COMMENT = "input 5";
			i6			:	BOOL			FLAGS = "i"
				COMMENT = "input 6";
			i7			:	BOOL			FLAGS = "i"
				COMMENT = "input 7";
			i8			:	BOOL			FLAGS = "i"
				COMMENT = "input 8";
				
			/*	Outputs ***************************************************/
			q			:	BOOL			FLAGS = "o"
				COMMENT = "output";
		END_VARIABLES;
		OPERATIONS
			typemethod	: C_FUNCTION	<FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;

END_LIBRARY;
