#include "ov.ovm"
#include "fb.ovm"
#include "ssc.ovm"

LIBRARY SSChelper
	VERSION   = "V0.1 (DD-Mon-YYYY)";
	AUTHOR    = "";
	COPYRIGHT = "";
	COMMENT   = "";
	
	/**
		Documentation of decoder.
		@note Javadoc syntax is allowed here.
		@attention Changes in this file will only generate new code in ./source/sourcetemplates/. Code in ./source/ is not overwritten. 
	*/
	CLASS decoder : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			CMD : STRING HAS_SET_ACCESSOR FLAGS = "i" COMMENT = "Command to be processed";
			parameter : STRING FLAGS = "o" COMMENT = "Parameter of the command";
			user : STRING FLAGS = "o" COMMENT = "user of the command";
			order : STRING FLAGS = "o" COMMENT = "order of the command";
			// Add variables here. The syntax is:
			// <Variable name> : <Datatype> [<Accessors>] [<FLAGS>] [<Comment>] [<INITIALVALUE>]
			// Example:
			// varName : STRING HAS_GET_ACCESSOR COMMENT="Description of varname.";
			// Example for a fb/functionblock based class
			// inputNAme : UINT HAS_SET_ACCESSOR FLAGS = "i" COMMENT = "Input of type UINT" INITIALVALUE = 5;
		END_VARIABLES;
		OPERATIONS
			// Declare functions here. You may use your own function types, e.g. MY_FUNC,
			// if MY_FUNC is declared in SSChelper.ovf. Implement the functions in decoder.c.
			// fb/functionblock based classes have to implement typemethod
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
		CLASS StringEq : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			in1 : STRING  FLAGS = "i" COMMENT = "string 1";
			in2 : STRING FLAGS = "i" COMMENT = "string";
			
			result : BOOL FLAGS = "o" COMMENT = "Command to be processed";
			// Add variables here. The syntax is:
			// <Variable name> : <Datatype> [<Accessors>] [<FLAGS>] [<Comment>] [<INITIALVALUE>]
			// Example:
			// varName : STRING HAS_GET_ACCESSOR COMMENT="Description of varname.";
			// Example for a fb/functionblock based class
			// inputNAme : UINT HAS_SET_ACCESSOR FLAGS = "i" COMMENT = "Input of type UINT" INITIALVALUE = 5;
		END_VARIABLES;
		OPERATIONS
			// Declare functions here. You may use your own function types, e.g. MY_FUNC,
			// if MY_FUNC is declared in SSChelper.ovf. Implement the functions in decoder.c.
			// fb/functionblock based classes have to implement typemethod
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
		CLASS usercheck : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			order : STRING  FLAGS = "i" COMMENT = "order to be processed";
			user : STRING FLAGS = "i" COMMENT = "user of the command";
			
			result : BOOL FLAGS = "o" COMMENT = "order is given by the allowed user";
			occupiedby : STRING FLAGS = "o" COMMENT = "id of the occupying user";
			lastOccupier : STRING FLAGS = "o" COMMENT = "id of last occupying user if overridden by OP";
			// Add variables here. The syntax is:
			// <Variable name> : <Datatype> [<Accessors>] [<FLAGS>] [<Comment>] [<INITIALVALUE>]
			// Example:
			// varName : STRING HAS_GET_ACCESSOR COMMENT="Description of varname.";
			// Example for a fb/functionblock based class
			// inputNAme : UINT HAS_SET_ACCESSOR FLAGS = "i" COMMENT = "Input of type UINT" INITIALVALUE = 5;
		END_VARIABLES;
		OPERATIONS
			// Declare functions here. You may use your own function types, e.g. MY_FUNC,
			// if MY_FUNC is declared in SSChelper.ovf. Implement the functions in decoder.c.
			// fb/functionblock based classes have to implement typemethod
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	CLASS setpointhandler : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			order : STRING  FLAGS = "i" COMMENT = "order to be processed";
			param : STRING  FLAGS = "i" COMMENT = "parameter";
			userok : BOOL FLAGS = "i" COMMENT = "result of usercheck";
			
			value : SINGLE FLAGS = "o" COMMENT = "actual setpoint";
			
			// Add variables here. The syntax is:
			// <Variable name> : <Datatype> [<Accessors>] [<FLAGS>] [<Comment>] [<INITIALVALUE>]
			// Example:
			// varName : STRING HAS_GET_ACCESSOR COMMENT="Description of varname.";
			// Example for a fb/functionblock based class
			// inputNAme : UINT HAS_SET_ACCESSOR FLAGS = "i" COMMENT = "Input of type UINT" INITIALVALUE = 5;
		END_VARIABLES;
		OPERATIONS
			// Declare functions here. You may use your own function types, e.g. MY_FUNC,
			// if MY_FUNC is declared in SSChelper.ovf. Implement the functions in decoder.c.
			// fb/functionblock based classes have to implement typemethod
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	CLASS commandCreator : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			order : STRING  FLAGS = "i" COMMENT = "order to be processed";
			param : STRING  FLAGS = "i" COMMENT = "parameter";
			sender : STRING  FLAGS = "i" COMMENT = "sender";
			start : BOOL HAS_SET_ACCESSOR FLAGS = "i" COMMENT = "startsignal" ;
			
			command : STRING FLAGS = "o" COMMENT = "command";
			
			// Add variables here. The syntax is:
			// <Variable name> : <Datatype> [<Accessors>] [<FLAGS>] [<Comment>] [<INITIALVALUE>]
			// Example:
			// varName : STRING HAS_GET_ACCESSOR COMMENT="Description of varname.";
			// Example for a fb/functionblock based class
			// inputNAme : UINT HAS_SET_ACCESSOR FLAGS = "i" COMMENT = "Input of type UINT" INITIALVALUE = 5;
		END_VARIABLES;
		OPERATIONS
			// Declare functions here. You may use your own function types, e.g. MY_FUNC,
			// if MY_FUNC is declared in SSChelper.ovf. Implement the functions in decoder.c.
			// fb/functionblock based classes have to implement typemethod
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS setVar : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			path : STRING  FLAGS = "i" COMMENT = "Path to target";
			var : ANY  FLAGS = "i" COMMENT = "var";
			port : STRING  FLAGS = "i" COMMENT = "Nanme of the port";
		
			
			// Add variables here. The syntax is:
			// <Variable name> : <Datatype> [<Accessors>] [<FLAGS>] [<Comment>] [<INITIALVALUE>]
			// Example:
			// varName : STRING HAS_GET_ACCESSOR COMMENT="Description of varname.";
			// Example for a fb/functionblock based class
			// inputNAme : UINT HAS_SET_ACCESSOR FLAGS = "i" COMMENT = "Input of type UINT" INITIALVALUE = 5;
		END_VARIABLES;
		OPERATIONS
			// Declare functions here. You may use your own function types, e.g. MY_FUNC,
			// if MY_FUNC is declared in SSChelper.ovf. Implement the functions in decoder.c.
			// fb/functionblock based classes have to implement typemethod
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	
	CLASS getSCUinfo : CLASS fb/functionblock
		IS_INSTANTIABLE;
		VARIABLES
			Path : STRING FLAGS = "i" COMMENT = "Path to SCU";
			workingState : STRING FLAGS = "o" COMMENT = "workingState of PCU";
			Error : BOOL FLAGS = "o" COMMENT = "TRUE if SCU is inside Errorstate";
			allocatedBy : STRING FLAGS = "o" COMMENT = "id of occupying user ";
			SetPoint : SINGLE FLAGS = "o" COMMENT = "Setpoint of SCU";
			// Add variables here. The syntax is:
			// <Variable name> : <Datatype> [<Accessors>] [<FLAGS>] [<Comment>] [<INITIALVALUE>]
			// Example:
			// varName : STRING HAS_GET_ACCESSOR COMMENT="Description of varname.";
			// Example for a fb/functionblock based class
			// inputNAme : UINT HAS_SET_ACCESSOR FLAGS = "i" COMMENT = "Input of type UINT" INITIALVALUE = 5;
		END_VARIABLES;
		OPERATIONS
			// Declare functions here. You may use your own function types, e.g. MY_FUNC,
			// if MY_FUNC is declared in SSChelper.ovf. Implement the functions in decoder.c.
			// fb/functionblock based classes have to implement typemethod
			typemethod  : C_FUNCTION <FB_FNC_TYPEMETHOD>;
		END_OPERATIONS;
	END_CLASS;
	/**
		Add associations and their documentation here.
		Association syntax is:
	*/
	//ASSOCIATION assocName : ONE_TO_MANY
	//	PARENT parentVarName : CLASS ov/object;
	//	CHILD  childVarName : CLASS ov/object;
	//END_ASSOCIATION;
	
END_LIBRARY;
