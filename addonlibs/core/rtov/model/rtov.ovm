#include "ov.ovm"

LIBRARY rtov
	VERSION   = "V0.1 (DD-Mon-YYYY)";
	AUTHOR    = "";
	COPYRIGHT = "";
	COMMENT   = "";
	
	/**
		Documentation of rtov.
		The rtov-object can enable real-time behaviour for the ov-server it is instantiated on.
		By default (and at instantiation) the highest real-time priority (99) and the scheduling policy FIFO are used.
		Changes can be made to the according variables. Changes for priority and scheduling policy take effect when action is triggered with a write to RTenable.  
		At startup, the set parameters take effect automatically. At shutdown real-time behaviour is always turned off.
	*/
	CLASS rtov : CLASS ov/object
		IS_INSTANTIABLE;
		VARIABLES
			// Add variables here. The syntax is:
			// <Variable name> : <Datatype> [<Accessors>] [<Comment>]
			// Example:
			// varName : STRING HAS_GET_ACCESSOR COMMENT="Description of varname.";
			RTenable	:	BOOL	HAS_SET_ACCESSOR
				COMMENT="Enable or disable real-time for this server. Changes of priority and scheduling policy are triggered here either."
				INITIALVALUE=TRUE;
			priority	:	UINT	HAS_SET_ACCESSOR
				COMMENT="Realtime-priority. Range 0 to 99 (usually) Higher values mean higher priority."
				INITIALVALUE=99;
			schedFIFO	:	BOOL
				COMMENT="Scheduling policy: TRUE=FIFO, FALSE=RoundRobin"
				INITIALVALUE=TRUE;
		END_VARIABLES;
		OPERATIONS
			// Declare functions here. You may use your own function types, e.g. MY_FUNC,
			// if MY_FUNC is declared in rtov.ovf. Implement the functions in rtov.c.
			constructor	:	C_FUNCTION <OV_FNC_CONSTRUCTOR>;
			startup : C_FUNCTION <OV_FNC_STARTUP>;
			shutdown	:	C_FUNCTION <OV_FNC_SHUTDOWN>;
			getaccess	:	C_FUNCTION <OV_FNC_GETACCESS>;
		END_OPERATIONS;
	END_CLASS;
	
	/**
		Add associations and their documentation here.
		Association syntax is:
	*/
	//ASSOCIATION assocName : ONE_TO_MANY
	//	PARENT parentVarName : CLASS ov/object;
	//	CHILD  childVarName : CLASS ov/object;
	//END_ASSOCIATION;
	
END_LIBRARY;
